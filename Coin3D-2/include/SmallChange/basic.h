#ifndef SMALLCHANGE_BASIC_H
#define SMALLCHANGE_BASIC_H

/**************************************************************************\
 *
 *  This file is part of the SmallChange extension library for Coin.
 *  Copyright (C) 1998-2003 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using SmallChange with software that can not be combined with the
 *  GNU GPL, and for taking advantage of the additional benefits of our
 *  support services, please contact Systems in Motion about acquiring
 *  a Coin Professional Edition License.
 *
 *  See <URL:http://www.coin3d.org> for  more information.
 *
 *  Systems in Motion, Teknobyen, Abels Gate 5, 7030 Trondheim, NORWAY.
 *  <URL:http://www.sim.no>.
 *
\**************************************************************************/

/* *********************************************************************** */

/*
  NOTE: basic.h is automatically generated from basic.h.in, so don't
  edit basic.h directly.
*/

/* *********************************************************************** */

/* A unique identifier to recognize Systems in Motion's SmallChange
 * library.
 */
#define __SMALLCHANGE__

/* The following #undef'ed defines are automatically defined and
 * synchronized with the settings in configure.in when ``configure''
 * is executed.
 *
 * The #ifndef wrapper is necessary because during development, these
 * are also defined in the config.h file generated by ``configure''.
 */
#ifndef SMALLCHANGE_VERSION

/* These are available for adding or omitting features based on
 * SmallChange version numbers in client application sources. */
#undef SMALLCHANGE_MAJOR_VERSION
#undef SMALLCHANGE_MINOR_VERSION
#undef SMALLCHANGE_MICRO_VERSION
#undef SMALLCHANGE_VERSION

#endif /* !SMALLCHANGE_VERSION */ /* Ends configure-generated defines. */


/* *********************************************************************** */

/* Precaution to avoid an some errors easily made by the application
   programmer. */
#ifdef SMALLCHANGE_DLL_API
# error Leave the internal SMALLCHANGE_DLL_API define alone.
#endif /* SMALLCHANGE_DLL_API */
#ifdef SMALLCHANGE_INTERNAL
# ifdef SMALLCHANGE_NOT_DLL
#  error The SMALLCHANGE_NOT_DLL define is not supposed to be used when building the library, only when building Win32 applications.
# endif /* SMALLCHANGE_INTERNAL && SMALLCHANGE_NOT_DLL */
# ifdef SMALLCHANGE_DLL
#  error The SMALLCHANGE_DLL define is not supposed to be used when building the library, only when building Win32 applications.
# endif /* SMALLCHANGE_INTERNAL && SMALLCHANGE_DLL */
#endif /* SMALLCHANGE_INTERNAL */

/*
  On MSWindows platforms, one of these defines must always be set when
  building application programs:

   - "SMALLCHANGE_DLL", when the application programmer is using the
     library in the form of a dynamic link library (DLL)

   - "SMALLCHANGE_NOT_DLL", when the application programmer is using
     the library in the form of a static object library (LIB)

  Note that either SMALLCHANGE_DLL or SMALLCHANGE_NOT_DLL _must_ be
  defined by the application programmer on MSWindows platforms, or
  else the #error statement will hit. Set up one or the other of these
  two defines in your compiler environment according to how the
  library was built -- as a DLL (use "SMALLCHANGE_DLL") or as a LIB
  (use "SMALLCHANGE_NOT_DLL").

  (Setting up defines for the compiler is typically done by either
  adding something like "/DSMALLCHANGE_DLL" to the compiler's argument
  line (for command-line build processes), or by adding the define to
  the list of preprocessor symbols in your IDE GUI (in the MSVC IDE,
  this is done from the "Project"->"Settings" menu, choose the "C/C++"
  tab, then "Preprocessor" from the dropdown box and add the
  appropriate define)).

  It is extremely important that the application programmer uses the
  correct define, as using "SMALLCHANGE_NOT_DLL" when
  "SMALLCHANGE_DLL" is correct will cause mysterious crashes.
 */
/* FIXME: use a feature check to see if this is a platform which can
   recognize the __declspec keyword instead of the crap #if below.
   20011201 mortene. */
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
# ifdef SMALLCHANGE_INTERNAL
#  ifdef SMALLCHANGE_MAKE_DLL
#   define SMALLCHANGE_DLL_API __declspec(dllexport)
#  endif /* SMALLCHANGE_MAKE_DLL */
# else /* !SMALLCHANGE_INTERNAL */
#  ifdef SMALLCHANGE_DLL
#   ifdef SMALLCHANGE_NOT_DLL
#     error Define _either_ SMALLCHANGE_DLL _or_ SMALLCHANGE_NOT_DLL as appropriate for your linkage -- not both at the same time! See Inventor/C/basic.h for further instructions.
#   endif /* SMALLCHANGE_NOT_DLL */
#   define SMALLCHANGE_DLL_API __declspec(dllimport)
#  else /* !SMALLCHANGE_DLL */
#   ifndef SMALLCHANGE_NOT_DLL
#    error Define either SMALLCHANGE_DLL or SMALLCHANGE_NOT_DLL as appropriate for your linkage! See Inventor/C/basic.h for further instructions.
#   endif /* SMALLCHANGE_NOT_DLL */
#  endif /* !SMALLCHANGE_DLL */
# endif /* !SMALLCHANGE_INTERNAL */
#endif /* Microsoft Windows */

/* Empty define to avoid errors when _not_ compiling an MSWindows DLL. */
#ifndef SMALLCHANGE_DLL_API
# define SMALLCHANGE_DLL_API
#endif /* !SMALLCHANGE_DLL_API */


#endif /* !SMALLCHANGE_BASIC_H */
