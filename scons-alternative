import sys, os
from glob import glob
from os.path import join, basename, dirname, isfile, walk
from sets import Set as set
################################################################################
#     extend path to include SCons builders                                    #
################################################################################
sys.path.append('builders')

################################################################################
#     Build-specific classes                                                   #
################################################################################
class CORBAStubs:
    def __init__(self, env, 
		 cxx_install_directory=join('idl', 'skeletons'), 
		 python_install_directory=join('lib','python')):
	self.env = env
	self.cxx_install_directory = cxx_install_directory
	self.python_install_directory = python_install_directory
	self.cxx, self.python, self.java = [], [], []

    def addCxxStubs(self, idl_file):
	self.cxx += env.OMNIIDLCXX(idl_file, OMNIIDL_INSTALL_DIRECTORY=self.cxx_install_directory)

    def addPythonStubs(self, idl_file):
	self.python += env.OMNIIDLPY(idl_file, OMNIIDL_INSTALL_DIRECTORY=self.python_install_directory)

    def addJavaStubs(self, idl_file, pkgprefix=None):
	if pkgprefix is None:
	    self.java += env.IDLJ(idl_file)
	else:
	    self.java += env.IDLJ(idl_file, PKGPREFIX=pkgprefix)

    def addStubsAndSkeletons(self, idl_file, pkgprefix=None):
	self.addCxxStubs(idl_file)
	if env['ENABLE_OMNIORBPY']:
	    self.addPythonStubs(idl_file)
	if env['ENABLE_JAVA']:
	    self.addJavaStubs(idl_file, pkgprefix)
	return {'cxx':self.cxx, 'python':self.python, 'java':self.java}

################################################################################
#     Build-specific functions                                                 #
################################################################################
def gatherHeaders(arg, dirname, fnames):
    try:
	fnames.remove('.svn')
    except ValueError:
	pass # do nothing
    for file in [file for file in fnames if file.startswith('#')]:
	fnames.remove(file)
    for file in [file for file in fnames if file.startswith('.#')]:
	fnames.remove(file)
    arg += [join(dirname, file) for file in fnames if file.endswith('.h') or file.endswith('.hh')]

def filterHeaders(files):
    return [file for file in files if str(file).endswith('.h') or str(file).endswith('.hh')]

def filterCppSources(files):
    return [file for file in files if str(file).endswith('.c') or str(file).endswith('.cc') or str(file).endswith('.cxx')]

def excludeDuplicates(_list):
    return list(set(tuple(_list)))

################################################################################
#     libraries, defines and source files required for minimal build           #
################################################################################
_libs = ['xerces-c', 'ACE']
_defines = ['OT_NO_FOB_SUPPORT', 'OT_NO_GPS_SUPPORT', 'OT_NO_NETWORK_SUPPORT', 'OT_NO_FILEMODULE_SUPPORT', 'OT_NO_TIMEMODULE_SUPPORT', 'OT_NO_XSENS_SUPPORT','OT_NO_MAGICY_SUPPORT', 'OT_NO_SPEECH_SUPPORT', 'OT_NO_CONSOLE_SUPPORT', 'OT_NO_CALLBACKMODULE_SUPPORT', 'OT_NO_FASTTRACK_SUPPORT', 'OT_NO_DYNASIGHT_SUPPORT', 'OT_NO_GROUPGATE_SUPPORT', 'OT_NO_ULTRATRACK_SUPPORT', 'OT_NO_INTERSENSE_SUPPORT', 'OT_NO_ORIENTATION_SUPPORT', 'OT_NO_INTERPORLATORMODULE_SUPPORT', 'OT_NO_ARTDATATRACKER_SUPPORT', 'OT_NO_BUTTON_SUPPORT', 'OT_NO_CONFIDENCE_SUPPORT', 'OT_NO_TIMEGATE_SUPPORT', 'OT_NO_TIMESTAMPGENERATOR_SUPPORT', 'OT_NO_CALLFORWARDMODULE_SUPPORT', 'OT_BACKUP_ON_RECONFIG', 'OT_NO_MOBILAB_SUPPORT']

essential_core_files = glob(join('src', 'core', '*.cxx')) + \
    [join('src', 'misc', 'OpenTracker.cxx')] + \
    [join('src', 'tool', 'OT_ACE_Log.cxx')]
common = ['ButtonOpNode.cxx', 'CommonNodeFactory.cxx', 'LogModule.cxx', 'FilterNode.cxx', 'SelectionNode.cxx', 'DESPFilterNode.cxx', 'Transformation.cxx', 'RangeFilterNode.cxx', 'EventUtilityNode.cxx', 'PositionFilterNode.cxx', 'ThresholdFilterNode.cxx', 'MatrixTransformation.cxx', 'VirtualTransformation.cxx', 'StaticTransformation.cxx', 'DynamicTransformation.cxx', 'EllipsoidTransformNode.cxx', 'TriangulateOrientationNode.cxx', 'DifferenceNode.cxx', 'EventQueueNode.cxx', 'InvertTransformation.cxx', 'MergeNode.cxx', 'DESP.cxx', 'HeartrateFilterNode.cxx']
common_files = [join('src', 'common', file) for file in common]
misc = [join('xml','XercesXMLWriter.cxx'), join('xml','TinyXMLWriter.cxx')]
misc_files = [join('src', 'misc', file) for file in misc]
input_files = []
python_files = []
jars = []

################################################################################
#     Set options                                                              #
################################################################################
opts = Options('custom.py')
opts.Add(BoolOption('DEBUG', 'Set to build for debug', 0))
opts.Add(BoolOption('ENABLE_CORBA', 'Set to enable support for CORBA', 0))
opts.Add(BoolOption('ENABLE_OMNIEVENTS', 'Set to enable support for OmniEvents', 0))
opts.Add(BoolOption('ENABLE_SHARED', 'Set to enable support for OmniEvents', 0))
opts.Add(BoolOption('ENABLE_OMNIORBPY', 'Set to build python stubs and skeletons', 0))
opts.Add(BoolOption('ENABLE_PYDOC', 'Set to build python API documentation', 0))
opts.Add(BoolOption('ENABLE_PHANTOM_MIDDLEWARE', 'Set to enable Phantom Middleware ', 0))
opts.Add(BoolOption('ENABLE_OTQT', 'Set to enable OT Qt support', 0))
opts.Add(BoolOption('ENABLE_JAVA', 'Set to enable OT Java support', 0))
opts.Add(BoolOption('ENABLE_INTERPOLATION', 'Set to enable interpolation support', 0))
opts.Add(BoolOption('ENABLE_LIVE', 'Set to enable support for fine-grained dynamic reconfiguration', 0))
opts.Add(BoolOption('ENABLE_FILE', 'Set to enable support for file sources and file sinks', 0))
opts.Add(BoolOption('ENABLE_CALLFORWARD', 'Set to enable support for Callforward nodes', 0))
opts.Add(BoolOption('ENABLE_CALLBACK', 'Set to enable support for Callback nodes', 0))
opts.Add(BoolOption('ENABLE_VRPN', 'Set to enable support for VRPN', 0))
opts.Add(BoolOption('ENABLE_MONO', 'Set to enable support for Mono', 0))
opts.Add('PREFIX', 'Set installation prefix', '')

################################################################################
#     Configure general environment                                            #
################################################################################
env = Environment (ENV = os.environ, options=opts)
env.Append(CPPPATH=['include'])
env.Append(LIBPATH=['lib'])
env.Append(LIBS=_libs)
env.Append(CPPDEFINES=_defines)

################################################################################
#     Handle different platform specific options                               #
################################################################################
if sys.platform == 'darwin':
    # Add default directories used by Darwin Ports
    env.Append(CPPPATH=['/opt/local/include']) 
    env.Append(LIBPATH=['/opt/local/lib'])
    #if env['DEBUG']:
	#env.Append(LIBS=['MallocDebug'])
    if env['ENABLE_CORBA']:
	env.Append(CPPDEFINES=["__x86__", "__darwin__", "__OSVERSION__=1"])
elif sys.platform.startswith('linux'):
    print "Linux specific configuration"
    input_files += [join('src', 'input', 'ParButtonModule.cxx'),
		    join('src', 'input', 'LinmouseModule.cxx'),
                    join('src', 'input', 'LinmouseSource.cxx')]
    if env['ENABLE_CORBA']:
	env.Append(CPPDEFINES=["__x86__", "__linux__", "__OSVERSION__=2"])
    env.Append(CPPDEFINES='_REENTRANT') # ACE specific issue on linux
    env.Append(CPPPATH='/usr/include/COS') # pick up COS headers
elif sys.platform == 'win32':
    print "Windows not supported at this time"
    sys.exit(-1)

################################################################################
#     Handle different build options                                           #
################################################################################
extra_files = []
additional_headers = []
python_local_dir = join('lib','python')
# Choose between debug and release options
if env['DEBUG']:
    env.Append(CXXFLAGS='-g')
else:
    env.Append(CXXFLAGS='-O2')
if env['ENABLE_CALLFORWARD']:
    env['CPPDEFINES'].remove('OT_NO_CALLFORWARDMODULE_SUPPORT')
    extra_files += [join('src', 'common', _file) for _file in ['CallforwardModule.cxx', 'CallforwardNode.cxx']]
if env['ENABLE_CALLBACK']:
    env['CPPDEFINES'].remove('OT_NO_CALLBACKMODULE_SUPPORT')
    extra_files += [join('src', 'common', _file) for _file in ['CallbackModule.cxx', 'CallbackNode.cxx']]
if env['ENABLE_INTERPOLATION']:
    env['CPPDEFINES'].remove('OT_NO_INTERPORLATORMODULE_SUPPORT')
    extra_files += [join('src', 'common', 'InterpolatorModule.cxx'), join('src', 'common', 'ElasticFilterNode.cxx')]
if env['ENABLE_FILE']:
    env['CPPDEFINES'].remove('OT_NO_FILEMODULE_SUPPORT')
    extra_files += [join('src', 'common', file) for file in ['FileModule.cxx', 'File.cxx']]

#*********************************#
# Enable or disable CORBA support #
#*********************************#
if env['ENABLE_CORBA']:
    # CORBAStubs instance will manage the various stubs and skeletons
    stub_generator = CORBAStubs(env)
    # configure environment to the various idl files that need to be compiled to CORBA stubs and skeletons
    import OmniIdlCxx
    OmniIdlCxx.generate(env)
    env.Append(CPPDEFINES='USE_CORBA')
    env.Append(LIBS=['omniORB4', 'COS4', 'omniDynamic4', 'omnithread'])
    env.Append(CPPPATH=['idl', join('idl', 'COS')])
    extra_files += [join('src', 'network', file) for file in ['CORBAUtils.cxx', 'CORBAModule.cxx']]
    if env['ENABLE_JAVA']:
	import IDLJBuilder
	IDLJBuilder.generate(env)
	# Use PKGTRANSLATE 2-tuples to e.g. convert from 'CosEventComm' -> 'org.omg.CosEventComm'
	env.Append(PKGTRANSLATE=[(_type, 'org.omg.' + _type) for _type in ['CosEventComm', 'CosLifeCycle', 'CosLifeCycle', 'CosNaming']])
	env.Append(IDL_INCLUDE_PATH=['idl', join('idl', 'COS')])
	env['IDL_INSTALL_DIRECTORY'] = 'src_java'
	env.Append(SOURCEDIR='src_java')
    if env['ENABLE_OMNIORBPY']:
	import OmniIdlPy
	OmniIdlPy.generate(env)
    for idl_file in [join('idl', _file) for _file in ['OT_CORBA.idl', 'UTS.idl']]:
	stub_generator.addStubsAndSkeletons(idl_file, pkgprefix='org.studierstube.opentracker')

#*********************************#
# Enable or disable CORBA support #
#*********************************#
if env['ENABLE_MONO']:
    import CSharpBuilder
    CSharpBuilder.generate(env)
    if env['ENABLE_LIVE']:
	import CLSBuilder
	CLSBuilder.generate(env)
	otgraph_dll = env.IDL2CLS(target=join('bin', 'dotnet', 'OTGraph.dll'), 
				  source=join('idl', 'OTGraph.idl'))
	graph_client = env.CLIProgram(target=join('bin', 'dotnet', 'GraphClient.exe'), 
				      source=[join('examples','MutableGraph','cs','MutableGraph.cs'),
					      join('bin','dotnet', 'IIOPChannel.dll')] + \
					      otgraph_dll)

#**************************************#
# Enable or disable OmniEvents support #
#**************************************#
if env['ENABLE_OMNIEVENTS']:
    if not env['ENABLE_CORBA']:
	print "Cannot have support for OmniEvents without also enabling CORBA support. Exiting...."
	sys.exit(-1)
    print "OmniEvents support enabled"
    env.Append(CPPDEFINES='USE_OMNIEVENTS')
    env.Append(LIBS='omniEvents')
    if env['ENABLE_JAVA']:
	for idl_file in [join('idl', 'COS', _file) for _file in ['CosEventComm.idl', 'CosLifeCycle.idl', 'CosEventChannelAdmin.idl']]:
	    stub_generator.addJavaStubs(idl_file, pkgprefix='org.omg')
	stub_generator.addJavaStubs(join('idl', 'EventChannelAdmin.idl'), pkgprefix='net.sourceforge.omniorb')
    stub_generator.addStubsAndSkeletons(join('idl', 'OT_EventChannel.idl'), pkgprefix='org.studierstube.opentracker')

#********************************************************#
# Enable or disable support for Gerhard's shared library #
#********************************************************#
if env['ENABLE_SHARED']:
    if not env['ENABLE_OMNIEVENTS']:
	print "Cannot have support for Shared library without also enabling OmniEvents support. Exiting..."
	sys.exit(-1)
    print "Shared support enabled"
    env.Append(CPPDEFINES='USE_SHARED')
    stub_generator.addStubsAndSkeletons(join('idl', 'Shared.idl'), pkgprefix='org.studierstube.opentracker')

#************************************#
# Enable or disable support for VRPN #
#************************************#
if env['ENABLE_VRPN']:
    env.Append(CPPDEFINES='USE_VRPN')
    env.Append(LIBS=['vrpn', 'vrpnserver'])
    extra_files += [join('src', 'network', file) for file in ['VRPNModule.cxx', 'VRPNSink.cxx', 'VRPNSource.cxx']]
#********************************************************************#
# Enable or disable support for fine-grained dynamic reconfiguration #
#********************************************************************#
if env['ENABLE_LIVE']:
    if not env['ENABLE_CORBA']:
	print "Cannot have support for fine-grained dynamic reconfigurationwithout also enabling CORBA support. Exiting..."
	sys.exit(-1)
    print "Fine-grained dynamic reconfiguration support enabled"
    env.Append(CPPDEFINES='USE_LIVE');
    stub_generator.addStubsAndSkeletons(join('idl', 'OTGraph.idl'), pkgprefix='org.studierstube.opentracker')

#********************************************************************#
# extract corba c++ stubs and skeletons sources and headers          #
#********************************************************************#
if env['ENABLE_CORBA']: 
    extra_files += filterCppSources(stub_generator.cxx)
    for header in filterHeaders(stub_generator.cxx):
	additional_headers += env.Command(join('include','OpenTracker', 'skeletons', basename(str(header))), header, Copy("$TARGET", "$SOURCE"))
    python_files += stub_generator.python

#**************************************************#
# Enable or disable support for Phantom Middleware #
#**************************************************#
if env['ENABLE_PHANTOM_MIDDLEWARE']:
    env.Append(CPPDEFINES='USE_PHANTOMMIDDLEWARE')
    env['LIBS'].append('phantom')
    extra_files += [join('src', 'network', 'PhantomMiddlewareModule.cxx')]

#******************************************#
# Enable or disable support for OTQT       #
# not working on Mac OS X at present time  #
#******************************************#
if env['ENABLE_OTQT']:
    env.Append(LIBPATH=join(env['ENV']['QTDIR'], 'lib'))
    env.Append(CPPPATH=[join(env['ENV']['QTDIR'], 'include'), 'extras'])
    env.Append(LIBS='qt-mt')
    env.Append(CPPDEFINES=['QT_NO_DEBUG', 'USE_OTQT'])
    extra_files += glob(join('extras', 'newmat10', '*.cpp'))
    extra_files += [join('src', 'otqt', f) for f in ['OTQt.cxx', 'QtMouseEventCalibModule.cxx', 'OTQtConfigFileEditor.cxx', 'QtMouseEventModule.cxx', 'OTQtLog.cxx', 'QtMouseEventModuleBase.cxx', 'OTQtMEMCalibProc.cxx', 'QtMouseEventSinkBase.cxx', 'OTQtMath.cxx', 'QtMousePosSink.cxx', 'QtAppScreen.cxx', 'QtMouseWheelSink.cxx', 'QtAppScreenPosSink.cxx', 'QtMouseButtonSink.cxx']]
    mocaction='moc $SOURCE -o $TARGET'
    env['BUILDERS']['moc']= Builder(action=mocaction)
    extra_files += env.moc('src/otqt/moc_OTQT.cxx', 'include/OpenTracker/otqt/OTQt.h')

#********************************#
# Enable or disable java support #
#********************************#
if env['ENABLE_JAVA']:
    print "Java support enabled"
    import JavacBld, JarBuilder, JavaShellScript
    JavacBld.generate(env)
    JarBuilder.generate(env)
    JavaShellScript.generate(env)
    stub_classes = env.JavacBld(stub_generator.java, CLASSINSTALLDIR='build')
    opentracker_stubs_jar = env.JarBld(target=join('src_java', 'OpenTrackerStubs.jar'), source = stub_classes, JARCHDIR='build')
    opentracker_stubs_src_jar = env.JarBld(target=join('src_java', 'OpenTrackerStubs_src.jar'), source = stub_generator.java, JARCHDIR='src_java')
    if env['ENABLE_OMNIEVENTS']:
	test_sources = [join('src_java', 'org', 'studierstube', 'opentracker', 'tests', _file) for _file in ['OTSinkExample.java', 'OTSourceExample.java', 'OTPushCons.java', 'OpenTrackerEventConsumer.java', 'EventChannelSinkObject.java', 'CorbaApp.java', 'OTEventChannelSourceObject.java', 'OTPushSupp.java']] + \
	    [join('src_java', 'org', 'studierstube', 'opentracker', _file) for _file in ['OTEvent.java']]
        other_jars = [join('src_java', _jar) for _jar in ['java-getopt-1.0.12.jar', 'vecmath1.2.jar']]
	test_classes = env.JavacBld(test_sources,
				       CLASSPATH=other_jars,
				       CLASSINSTALLDIR='build')
	test_jar = env.JarBld(target=join('src_java', 'Tests.jar'), 
			      source = test_classes, JARCHDIR='build')
	push_cons = env.JavaShellScript(join('bin', 'OpenTrackerEventConsumer'), 
					opentracker_stubs_jar + test_jar + \
					other_jars,
					PKGPREFIX='org.studierstube.opentracker.tests')
	sink_example = env.JavaShellScript(join('bin', 'OTSinkExample'), 
					opentracker_stubs_jar + test_jar + \
					other_jars,
					PKGPREFIX='org.studierstube.opentracker.tests')
	source_example = env.JavaShellScript(join('bin', 'OTSourceExample'), 
					opentracker_stubs_jar + test_jar + \
					other_jars,
					PKGPREFIX='org.studierstube.opentracker.tests')
#********************************************#
# Enable or disable python API documentation #
#********************************************#
if env['ENABLE_PYDOC']:
    import PyDocBuilder
    PyDocBuilder.generate(env)
    pydocs = env.EPyDoc(glob(join('src_python', '*.py')))
    print "pydocs = ", pydocs
################################################################################
#     set targets                                                              #
################################################################################
otlib = env.SharedLibrary(join('lib', 'opentracker'), essential_core_files + common_files + input_files + extra_files + misc_files)
# Copy otlib sources
#env.Install( join('build', 'src'), essential_core_files + common_files + input_files + extra_files )


# create new environment for building executables
prgenv = env.Copy()
prgenv.Append(LIBS='opentracker')
executables  =  prgenv.Program(join('bin','opentracker'), join('src','standalones','main.cxx'))
executables += prgenv.Program(join('bin','middleware'), join('src','standalones','middleware.cxx'))
executables += prgenv.Program(join('bin','opentracker2c'), join('src','standalones','configurable.cxx'))
if env['ENABLE_CORBA']:
    executables += prgenv.Program(join('bin','opentracker2con'), join('src','standalones','corba_configurable.cxx'))
if env['ENABLE_LIVE']:
    executables += prgenv.Program(join('bin','otlive'), [join('src','standalones','live_opentracker.cxx')])
if env['ENABLE_CALLFORWARD'] and env['ENABLE_CALLBACK']:
    pass
    #executables += prgenv.Program(join('bin','cbcfexample'), [join('examples', 'CallbackCallforwardExampleConsole', 'cbcfexample.cxx')])
################################################################################
# install everything into prefix, if there is such a thing                     #
################################################################################
prefix = ARGUMENTS.get('PREFIX')
if prefix:
    bin_inst = env.Install(join(prefix, 'bin'), executables)
    lib_inst = env.Install(join(prefix, 'lib'), [otlib])
    header_files = []
    walk('include', gatherHeaders, header_files)
    inc_inst = []
    # obtain list of all header files to be installed, and exclude duplicate entries
    for header in excludeDuplicates(header_files + additional_headers):
	inc_inst.append(env.Install( join(prefix, dirname(str(header))), header))
    # python files to install in PREFIX/lib/python2.4/site-packages
    py_inst, libpythondirstrlen = [], len(python_local_dir)+1
    site_package_directory = join(prefix, 'lib', 'python%d.%d' % tuple(sys.version_info[0:2]), 'site-packages')
    for _destination, _source in [( str(f)[libpythondirstrlen:] , f) for f in python_files]:
	py_inst.append(env.InstallAs(join(site_package_directory, _destination), _source))
    # jar files to install
    jar_inst = env.Install(join(prefix, 'lib'), jars)
    # all files to be installed
    install_files = [bin_inst, inc_inst, lib_inst, py_inst, jar_inst]
    env.Alias('install', install_files )
