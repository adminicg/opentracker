# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.SSL_SAP_Client_Simple
#
# gnu.mpd,v 1.95 2004/07/01 19:00:58 elliott_c Exp
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.SSL_SAP_Client_Simple
DEPENDENCY_FILE  = .depend.SSL_SAP_Client_Simple
BIN_UNCHECKED    = client-simple

FILES = \
  SSL-client-simple

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lACE_SSL -lACE -lssl -lcrypto

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/SSL_SAP_Client_Simple

all: $(TEMPINCDIR)

endif

INSBIN ?= .
OUTPUT_DIRECTORY = $(INSBIN)
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,ACE_SSL ACE,$(findstring $(lib),$(foreach libpath,../../../lib $(SSL_ROOT)/lib $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),ACE_SSL ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(ssl),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)
else
  all: lib_warning
endif
else
  all: require_warning
endif

OBJS   = $(addsuffix .o, $(notdir $(FILES)))
SRC    = $(addsuffix .cpp, $(FILES))
ifneq (,$(RC))
  FILES += $(RESOURCES)
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU

LDFLAGS      += -L../../../lib -L$(SSL_ROOT)/lib
CPPFLAGS     += -I../../.. -I$(SSL_ROOT)/include -I/usr/kerberos/include
CPPFLAGS     += -DACE_HAS_SSL=1
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

require_warning:
	@echo This project will not be built due to one of the following missing features:
	@echo ssl


ifndef kylix
$(BIN): $(addprefix $(VDIR), $(OBJS))
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $^ $(VLDLIBS) $(POSTLINK)
else
$(BIN): $(addprefix $(VDIR), $(OBJS))
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $(VLDLIBS) $(BORINITEXEOBJ) $(POSTLINK) $^, $@,,
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

