# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.drwho__client
#
# gnu.mpd,v 1.95 2004/07/01 19:00:58 elliott_c Exp
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.drwho__client
DEPENDENCY_FILE  = .depend.drwho__client
BIN_UNCHECKED    = Multicast_Manager

FILES = \
  Protocol_Manager \
  Drwho_Node \
  Rwho_DB_Manager \
  Multicast_Manager \
  Protocol_Record \
  Options \
  File_Manager \
  Hash_Table \
  Binary_Search \
  Search_Struct \
  Single_Lookup \
  SML_Server \
  SM_Server \
  PMS_Usr \
  SL_Server \
  PMS_Flo \
  PM_Server \
  HT_Server \
  BS_Server \
  PMS_All \
  PMS_Ruser \
  SMR_Server \
  CM_Client \
  SM_Client \
  SMR_Client \
  PM_Client \
  HT_Client \
  BS_Client \
  PMC_All \
  PMC_Flo \
  PMC_Usr \
  SL_Client \
  PMC_Ruser \
  SML_Client \
  CM_Server \
  client

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lACE

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/drwho__client

all: $(TEMPINCDIR)

endif

INSBIN ?= .
OUTPUT_DIRECTORY = $(INSBIN)
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,ACE,$(findstring $(lib),$(foreach libpath,../../lib $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(rwho),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)
else
  all: lib_warning
endif
else
  all: require_warning
endif

OBJS   = $(addsuffix .o, $(notdir $(FILES)))
SRC    = $(addsuffix .cpp, $(FILES))
ifneq (,$(RC))
  FILES += $(RESOURCES)
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU

LDFLAGS      += -L../../lib
CPPFLAGS     += -I../..
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

require_warning:
	@echo This project will not be built due to one of the following missing features:
	@echo rwho


ifndef kylix
$(BIN): $(addprefix $(VDIR), $(OBJS))
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $^ $(VLDLIBS) $(POSTLINK)
else
$(BIN): $(addprefix $(VDIR), $(OBJS))
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $(VLDLIBS) $(BORINITEXEOBJ) $(POSTLINK) $^, $@,,
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

