// generated 2003/9/11 20:59:49 GMT by tamer@katakis.(none)
// using glademm V2.0.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /scratch/studierstube/studierstube/src/apps/vacuum/gtk/vacuum.glade
// for gtk 2.2.1 and gtkmm 2.2.5
//
// Please modify the corresponding derived classes in .//main_window.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include "main_window_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/imagemenuitem.h>
#include <gtk/gtkimagemenuitem.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/image.h>
#include <gtkmm/radiomenuitem.h>
#include <gtkmm/menubar.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/separator.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/table.h>
#include <gtkmm/statusbar.h>

main_window_glade::main_window_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *main_window = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::ImageMenuItem *open = NULL;
   Gtk::MenuItem *separator1 = NULL;
   Gtk::ImageMenuItem *quit = NULL;
   Gtk::Menu *menuitem1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem1 = NULL;
   Gtk::Image *image76 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-convert"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *volume = NULL;
   Gtk::Image *image77 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-cut"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *orthoslice = NULL;
   Gtk::Menu *menuitem3_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem3 = NULL;
   Gtk::RadioMenuItem::Group _RadioMIGroup_;
   Gtk::RadioMenuItem *axis_x = NULL;
   Gtk::RadioMenuItem::Group _RadioMIGroup_axis_x;
   Gtk::RadioMenuItem *axis_y = NULL;
   Gtk::RadioMenuItem *axis_z = NULL;
   Gtk::Menu *axis_menu = Gtk::manage(new class Gtk::Menu());
   axis = NULL;
   interpolation_nearest = NULL;
   Gtk::RadioMenuItem::Group _RadioMIGroup_interpolation_nearest;
   Gtk::RadioMenuItem *interpolation_linear = NULL;
   Gtk::Menu *interpolation_menu = Gtk::manage(new class Gtk::Menu());
   interpolation = NULL;
   alpha_as_is = NULL;
   Gtk::RadioMenuItem::Group _RadioMIGroup_alpha_as_is;
   Gtk::RadioMenuItem *alpha_opaque = NULL;
   Gtk::RadioMenuItem *alpha_binary = NULL;
   Gtk::Menu *alpha_use_menu = Gtk::manage(new class Gtk::Menu());
   alpha_use = NULL;
   Gtk::RadioMenuItem *clipping_front = NULL;
   Gtk::RadioMenuItem::Group _RadioMIGroup_clipping_front;
   Gtk::RadioMenuItem *clipping_back = NULL;
   Gtk::Menu *clipping_side_menu = Gtk::manage(new class Gtk::Menu());
   clipping_side = NULL;
   Gtk::Menu *sliceoptions_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *sliceoptions = NULL;
   Gtk::MenuItem *about = NULL;
   Gtk::Menu *menuitem4_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem4 = NULL;
   Gtk::MenuBar *menubar1 = Gtk::manage(new class Gtk::MenuBar());
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label("<b>Colormap: </b>"));
   Gtk::MenuItem *grey = NULL;
   Gtk::MenuItem *temperature = NULL;
   Gtk::MenuItem *physics = NULL;
   Gtk::MenuItem *standard = NULL;
   Gtk::MenuItem *glow = NULL;
   Gtk::MenuItem *blue_red = NULL;
   Gtk::MenuItem *seismic = NULL;
   Gtk::Menu *menu1 = Gtk::manage(new class Gtk::Menu());
   colormap_optionmenu = Gtk::manage(new class Gtk::OptionMenu());
   
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label("<b>Color Map Type: </b>"));
   Gtk::MenuItem *alpha = NULL;
   Gtk::MenuItem *lumalpha = NULL;
   Gtk::MenuItem *rgba = NULL;
   Gtk::Menu *menu2 = Gtk::manage(new class Gtk::Menu());
   colormaptype_optionmenu = Gtk::manage(new class Gtk::OptionMenu());
   
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::HSeparator *hseparator1 = Gtk::manage(new class Gtk::HSeparator());
   Gtk::Label *label8 = Gtk::manage(new class Gtk::Label("<b>remap:</b>"));
   Gtk::Label *label9 = Gtk::manage(new class Gtk::Label("min:"));
   entry_remap_min = Gtk::manage(new class Gtk::Entry());
   
   Gtk::Label *label10 = Gtk::manage(new class Gtk::Label("- max:"));
   entry_remap_max = Gtk::manage(new class Gtk::Entry());
   
   Gtk::HBox *hbox8 = Gtk::manage(new class Gtk::HBox(false, 3));
   Gtk::VSeparator *vseparator1 = Gtk::manage(new class Gtk::VSeparator());
   Gtk::Label *label11 = Gtk::manage(new class Gtk::Label("<b>offset:</b>"));
   Gtk::Label *label12 = Gtk::manage(new class Gtk::Label("<b>shift:</b>"));
   Gtk::Adjustment *offset_scale_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   offset_scale = Gtk::manage(new class Gtk::HScale(*offset_scale_adj));
   
   Gtk::Adjustment *shift_scale_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   shift_scale = Gtk::manage(new class Gtk::HScale(*shift_scale_adj));
   
   Gtk::Table *table1 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::HBox *hbox7 = Gtk::manage(new class Gtk::HBox(false, 0));
   drawingarea = Gtk::manage(new class Gtk::DrawingArea());
   
   Gtk::VBox *vbox3 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::VBox *vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Statusbar *statusbar1 = Gtk::manage(new class Gtk::Statusbar());
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   menuitem1_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-open")));
   open = (Gtk::ImageMenuItem *)&menuitem1_menu->items().back();
   
   menuitem1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separator1 = (Gtk::MenuItem *)&menuitem1_menu->items().back();
   
   menuitem1_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-quit")));
   quit = (Gtk::ImageMenuItem *)&menuitem1_menu->items().back();
   
   menuitem3_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("Volume", Gtk::Menu_Helpers::AccelKey(GDK_V, Gdk::CONTROL_MASK), *image76));
   volume = (Gtk::ImageMenuItem *)&menuitem3_menu->items().back();
   
   menuitem3_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("OrthoSlice", Gtk::Menu_Helpers::AccelKey(GDK_S, Gdk::CONTROL_MASK), *image77));
   orthoslice = (Gtk::ImageMenuItem *)&menuitem3_menu->items().back();
   
   axis_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_axis_x, "X"));
   axis_x = (Gtk::RadioMenuItem *)&axis_menu->items().back();
   
   axis_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_axis_x, "Y"));
   axis_y = (Gtk::RadioMenuItem *)&axis_menu->items().back();
   
   axis_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_axis_x, "Z"));
   axis_z = (Gtk::RadioMenuItem *)&axis_menu->items().back();
   
   interpolation_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_interpolation_nearest, "nearest"));
   interpolation_nearest = (Gtk::RadioMenuItem *)&interpolation_menu->items().back();
   
   interpolation_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_interpolation_nearest, "linear"));
   interpolation_linear = (Gtk::RadioMenuItem *)&interpolation_menu->items().back();
   
   alpha_use_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_alpha_as_is, "as is"));
   alpha_as_is = (Gtk::RadioMenuItem *)&alpha_use_menu->items().back();
   
   alpha_use_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_alpha_as_is, "opaque"));
   alpha_opaque = (Gtk::RadioMenuItem *)&alpha_use_menu->items().back();
   
   alpha_use_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_alpha_as_is, "binary"));
   alpha_binary = (Gtk::RadioMenuItem *)&alpha_use_menu->items().back();
   
   clipping_side_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_clipping_front, "front"));
   clipping_front = (Gtk::RadioMenuItem *)&clipping_side_menu->items().back();
   
   clipping_side_menu->items().push_back(Gtk::Menu_Helpers::RadioMenuElem(_RadioMIGroup_clipping_front, "back"));
   clipping_back = (Gtk::RadioMenuItem *)&clipping_side_menu->items().back();
   
   sliceoptions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Axis", *axis_menu));
   axis = (Gtk::MenuItem *)&sliceoptions_menu->items().back();
   
   sliceoptions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Interpolation", *interpolation_menu));
   interpolation = (Gtk::MenuItem *)&sliceoptions_menu->items().back();
   
   sliceoptions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("A_lpha Use", *alpha_use_menu));
   alpha_use = (Gtk::MenuItem *)&sliceoptions_menu->items().back();
   
   sliceoptions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Clipping Side", *clipping_side_menu));
   clipping_side = (Gtk::MenuItem *)&sliceoptions_menu->items().back();
   
   menuitem4_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_About"));
   about = (Gtk::MenuItem *)&menuitem4_menu->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem("_File", *menuitem1_menu));
   menuitem1 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem("_View", *menuitem3_menu));
   menuitem3 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem("_Sliceoptions", *sliceoptions_menu));
   sliceoptions = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem("_Help", *menuitem4_menu));
   menuitem4 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("grey"));
   grey = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("temperature"));
   temperature = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("physics"));
   physics = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("standard"));
   standard = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("glow"));
   glow = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("blue red"));
   blue_red = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem("seismic"));
   seismic = (Gtk::MenuItem *)&menu1->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("alpha"));
   alpha = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("lum alpha"));
   lumalpha = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("rgba"));
   rgba = (Gtk::MenuItem *)&menu2->items().back();
   image76->set_alignment(0.5,0.5);
   image76->set_padding(0,0);
   image77->set_alignment(0.5,0.5);
   image77->set_padding(0,0);
   axis_x->set_active(true);
   axis_y->set_active(true);
   axis_z->set_active(true);
   interpolation_nearest->set_active(true);
   interpolation_linear->set_active(true);
   alpha_as_is->set_active(true);
   alpha_opaque->set_active(true);
   alpha_binary->set_active(true);
   clipping_front->set_active(true);
   clipping_back->set_active(true);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(true);
   label1->set_selectable(false);
   colormap_optionmenu->set_flags(Gtk::CAN_FOCUS);
   colormap_optionmenu->set_history(0);
   colormap_optionmenu->set_menu(*menu1);
   hbox2->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   hbox2->pack_start(*colormap_optionmenu);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(true);
   label2->set_selectable(false);
   colormaptype_optionmenu->set_flags(Gtk::CAN_FOCUS);
   colormaptype_optionmenu->set_history(0);
   colormaptype_optionmenu->set_menu(*menu2);
   hbox3->pack_start(*label2, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*colormaptype_optionmenu);
   hbox1->set_border_width(2);
   hbox1->pack_start(*hbox2);
   hbox1->pack_start(*hbox3);
   label8->set_alignment(0.5,0.5);
   label8->set_padding(0,0);
   label8->set_justify(Gtk::JUSTIFY_LEFT);
   label8->set_line_wrap(false);
   label8->set_use_markup(true);
   label8->set_selectable(false);
   label9->set_alignment(0.5,0.5);
   label9->set_padding(0,0);
   label9->set_justify(Gtk::JUSTIFY_LEFT);
   label9->set_line_wrap(false);
   label9->set_use_markup(false);
   label9->set_selectable(false);
   entry_remap_min->set_size_request(30,-1);
   entry_remap_min->set_flags(Gtk::CAN_FOCUS);
   entry_remap_min->set_visibility(true);
   entry_remap_min->set_editable(true);
   entry_remap_min->set_max_length(0);
   entry_remap_min->set_text("0");
   entry_remap_min->set_has_frame(true);
   entry_remap_min->set_activates_default(false);
   label10->set_alignment(0.5,0.5);
   label10->set_padding(0,0);
   label10->set_justify(Gtk::JUSTIFY_LEFT);
   label10->set_line_wrap(false);
   label10->set_use_markup(false);
   label10->set_selectable(false);
   entry_remap_max->set_size_request(30,-1);
   entry_remap_max->set_flags(Gtk::CAN_FOCUS);
   entry_remap_max->set_visibility(true);
   entry_remap_max->set_editable(true);
   entry_remap_max->set_max_length(0);
   entry_remap_max->set_text("255");
   entry_remap_max->set_has_frame(true);
   entry_remap_max->set_activates_default(false);
   hbox8->set_border_width(5);
   hbox8->pack_start(*label9, Gtk::PACK_SHRINK, 0);
   hbox8->pack_start(*entry_remap_min, Gtk::PACK_SHRINK, 0);
   hbox8->pack_start(*label10, Gtk::PACK_SHRINK, 0);
   hbox8->pack_start(*entry_remap_max, Gtk::PACK_SHRINK, 0);
   label11->set_alignment(0,0.5);
   label11->set_padding(0,0);
   label11->set_justify(Gtk::JUSTIFY_LEFT);
   label11->set_line_wrap(false);
   label11->set_use_markup(true);
   label11->set_selectable(false);
   label12->set_alignment(0,0.5);
   label12->set_padding(0,0);
   label12->set_justify(Gtk::JUSTIFY_LEFT);
   label12->set_line_wrap(false);
   label12->set_use_markup(true);
   label12->set_selectable(false);
   offset_scale->set_flags(Gtk::CAN_FOCUS);
   offset_scale->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   offset_scale->set_digits(1);
   offset_scale->set_draw_value(true);
   offset_scale->set_value_pos(Gtk::POS_RIGHT);
   shift_scale->set_flags(Gtk::CAN_FOCUS);
   shift_scale->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   shift_scale->set_digits(1);
   shift_scale->set_draw_value(true);
   shift_scale->set_value_pos(Gtk::POS_RIGHT);
   table1->set_row_spacings(2);
   table1->set_col_spacings(2);
   table1->attach(*label11, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*label12, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*offset_scale, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*shift_scale, 1, 2, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
   hbox7->pack_start(*label8, Gtk::PACK_SHRINK, 0);
   hbox7->pack_start(*hbox8, Gtk::PACK_SHRINK, 0);
   hbox7->pack_start(*vseparator1);
   hbox7->pack_start(*table1);
   drawingarea->set_size_request(256,20);
   vbox3->pack_start(*hbox7, Gtk::PACK_SHRINK, 0);
   vbox3->pack_start(*drawingarea, Gtk::PACK_SHRINK, 0);
   vbox2->pack_start(*hbox1, Gtk::PACK_SHRINK, 0);
   vbox2->pack_start(*hseparator1, Gtk::PACK_SHRINK, 0);
   vbox2->pack_start(*vbox3, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*menubar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*vbox2);
   vbox1->pack_start(*statusbar1, Gtk::PACK_SHRINK, 0);
   main_window->set_size_request(400,140);
   main_window->set_title("Studierstube - Vacuum");
   main_window->set_modal(false);
   main_window->property_window_position().set_value(Gtk::WIN_POS_NONE);
   main_window->set_resizable(true);
   main_window->property_destroy_with_parent().set_value(false);
   main_window->add(*vbox1);
   open->show();
   separator1->show();
   quit->show();
   menuitem1->show();
   image76->show();
   volume->show();
   image77->show();
   orthoslice->show();
   menuitem3->show();
   axis_x->show();
   axis_y->show();
   axis_z->show();
   axis->show();
   interpolation_nearest->show();
   interpolation_linear->show();
   interpolation->show();
   alpha_as_is->show();
   alpha_opaque->show();
   alpha_binary->show();
   alpha_use->show();
   clipping_front->show();
   clipping_back->show();
   clipping_side->show();
   sliceoptions->show();
   about->show();
   menuitem4->show();
   menubar1->show();
   label1->show();
   grey->show();
   temperature->show();
   physics->show();
   standard->show();
   glow->show();
   blue_red->show();
   seismic->show();
   colormap_optionmenu->show();
   hbox2->show();
   label2->show();
   alpha->show();
   lumalpha->show();
   rgba->show();
   colormaptype_optionmenu->show();
   hbox3->show();
   hbox1->show();
   hseparator1->show();
   label8->show();
   label9->show();
   entry_remap_min->show();
   label10->show();
   entry_remap_max->show();
   hbox8->show();
   vseparator1->show();
   label11->show();
   label12->show();
   offset_scale->show();
   shift_scale->show();
   table1->show();
   hbox7->show();
   drawingarea->show();
   vbox3->show();
   vbox2->show();
   statusbar1->show();
   vbox1->show();
   main_window->show();
   open->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_open_activate));
   quit->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_quit_activate));
   volume->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_volume_activate));
   orthoslice->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_orthoslice_activate));
   axis_x->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_axis_x_activate));
   axis_y->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_axis_y_activate));
   axis_z->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_axis_z_activate));
   interpolation_nearest->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_interpolation_nearest_activate));
   interpolation_linear->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_interpolation_linear_activate));
   alpha_as_is->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_alpha_as_is_activate));
   alpha_opaque->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_alpha_opaque_activate));
   alpha_binary->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_alpha_binary_activate));
   clipping_front->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_clipping_front_activate));
   clipping_back->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_clipping_back_activate));
   about->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_about_activate));
   grey->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_grey_activate));
   temperature->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_temperature_activate));
   physics->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_physics_activate));
   standard->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_standard_activate));
   glow->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_glow_activate));
   blue_red->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_blue_red_activate));
   seismic->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_seismic_activate));
   alpha->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_alpha_activate));
   lumalpha->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_lumalpha_activate));
   rgba->signal_activate().connect(SigC::slot(*this, &main_window_glade::on_rgba_activate));
   entry_remap_min->signal_changed().connect(SigC::slot(*this, &main_window_glade::on_entry_remap_min_changed));
   entry_remap_max->signal_changed().connect(SigC::slot(*this, &main_window_glade::on_entry_remap_max_changed));
   offset_scale->signal_value_changed().connect(SigC::slot(*this, &main_window_glade::on_offset_scale_value_changed));
   shift_scale->signal_value_changed().connect(SigC::slot(*this, &main_window_glade::on_shift_scale_value_changed));
   main_window->signal_delete_event().connect(SigC::slot(*this, &main_window_glade::on_main_window_delete_event));
}

main_window_glade::~main_window_glade()
{  delete gmm_data;
}
