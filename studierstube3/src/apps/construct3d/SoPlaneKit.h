// ===========================================================================
//  (C) 2000 Vienna University of Technology
// ===========================================================================
//  NAME:       Cnd.cxx
//  TYPE:       c++ source code
//  PROJECT:    Studierstube Workspace
//  CONTENT:    Geometric Construction in n Dimensions
//  VERSION:    1.3
// ===========================================================================
//  AUTHOR:    hk      Hannes Kaufmann
// ===========================================================================
//  HISTORY:   Time of development: Dezember 1999 - 
//
// ===========================================================================


#ifndef _SOPLANEKIT_H_
#define _SOPLANEKIT_H_

#include "Object3dKit.h"
#include "SoPointKit.h"
#include "SoLineKit.h"

#ifdef WIN32
#include <SoWinLeaveScope.h>
#endif

class SoPlaneKit: public Object3dKit
{ 
  SO_KIT_HEADER(SoPlaneKit);
  
  //set parts
  SO_KIT_CATALOG_ENTRY_HEADER(texture);
  SO_KIT_CATALOG_ENTRY_HEADER(objectVertexProperty);
  SO_KIT_CATALOG_ENTRY_HEADER(object);

  
public: 
//  SoSFVec3f backColor;// default = 3
  SoSFBool normal, symmetry, size3Points; // normal=TRUE if plane is normal to something
  SoFieldSensor *objectOneSensor;
  SoFieldSensor *objectTwoSensor;
  SoFieldSensor *objectThreeSensor;
  SoFieldSensor *objectFourSensor; //for tangetial plane
  SoFieldSensor *objectFiveSensor; //for tangetial plane between two sphere
  SoFieldSensor *objectSixSensor; //for tangetial plane between two sphere
  SoFieldSensor *objectSevenSensor; //for plane defined by two line

  SoSFVec3f planePointOne, planePointTwo, planePointThree, planePointFour;
  
  SoSFName PointOneName;
  SoSFName PointTwoName;
  SoSFName PointThreeName;
  SoSFName ObjectName; //for tangental plane save the name of the object on with the plane lie
  SoSFName SphereOneName; //for tangental plane between two sphere save the name of the first sphere
  SoSFName SphereTwoName; //for tangental plane between two sphere save the name of the second sphere
  SoSFName TangentPointOneName; //for tangental plane between two sphere save the name of the second sphere
  SoSFName TangentPointTwoName; //for tangental plane between two sphere save the name of the second sphere
  SoSFName LineOneName; //for plane defined by two plane. save the name of der first line
  SoSFName LineTwoName; //for plane defined by two plane. save the name of der second line
  
  PLANE* a_Plane;
  
  static void initClass(); 
  SoPlaneKit(
    ); 
  ~SoPlaneKit(
    );
/*  SoPlaneKit(
    int number
    ); 
  // constructor for 
  // * plane generated by three points
  SoPlaneKit(
    int number,
    SoNode* pointOne,
    SoNode* pointTwo,
    SoNode* pointThree
    );
  // constructor for symmetry and normal plane
  SoPlaneKit(
    int number,
    SoNode* objectOne,
    SoNode* objectTwo,
    SbBool symmetry,
    SbBool normal
    );
*/  
  SoPlaneKit(
    int number,
    std::vector<int> objectList,
    SbBool normalPlane, 
    SbBool symmetryPlane,
    int userID,
    SoSFInt32* objSum
    );
  SoPlaneKit(
    int number,
    std::vector<int> objectList,
    int userID
    );
  void initSoPlaneKit(
    );
  float getDistance(
    SbVec3f penSPAposition
    );
  static void nameUpdate(
    void *data,
    SoSensor *sensor
    );
  FACE* GetPlaneFace(int normal);

//  void changePlaneTexture(
//      int state, 
//      int currentUserID
//      );

  void UpdateAcisObject();

protected:

  SoSFInt32* objSum;

  void setHighlightMaterial(
	  int userID
	);
  virtual void OnChange();
  
  void CreateSensors();

  void caltangentPlanebetweentwoSphere();
  void calPlanedefinedbytwoLine();
  void caltangentPlane();
  void calPlanesize3Points();
  
  int Triangulate(FACE* p_Face, SbVec3f* &p_VertexArray);

  SoSFVec3f PointmaxDistance(SbVec3f* VertexArray, int NumVertices, SPAposition Point);

  SoSFVec3f GetcentrePoint(SPAposition Point1, SPAposition Point2, SPAposition Point3);

  int FacePlane(double planeSize, SPAvector normalvector, SPAposition Point, SbVec3f* &VertexArray);
  void FacePlane(SPAvector normalvector, SPAposition Point1, SPAposition Point2, SPAposition Point3,  SbVec3f* &VertexArray);
  
  float GetmaxDistancePointtoPoints(SoSFVec3f Center, SPAposition Point1, SPAposition Point2, SPAposition Point3); 

  /** This will detach/attach the fieldSensor.
  * It is called at the end of the constructor (to attach).
  * and at the start/end of SoBaseKit::readInstance()
  * and on the new copy at the start/end of SoBaseKit::copy().
  * Returns the state of the node when this was called.
  */
  virtual SbBool setUpConnections(SbBool onOff, SbBool doItAlways = FALSE);
  virtual void SoPlaneKit::Undo(SoSelection* SelectionRoot, SoSFInt32* ObjSum);

  SbBool checkObjects(std::vector<int> objectList);
};

#ifdef WIN32
#include <SoWinEnterScope.h>
#endif

#endif//_SOPLANEKIT_H_
