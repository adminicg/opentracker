// ===========================================================================
//  (C) 2000 Vienna University of Technology
// ===========================================================================
//  NAME:       Cnd.cxx
//  TYPE:       c++ source code
//  PROJECT:    Studierstube Workspace
//  CONTENT:    Geometric Construction in n Dimensions
//  VERSION:    1.3
// ===========================================================================
//  AUTHOR:    hk      Hannes Kaufmann
// ===========================================================================
//  HISTORY:   Time of development: Dezember 1999 - 
//
// ===========================================================================


#ifndef _SOPOLYGONKIT_H_
#define _SOPOLYGONKIT_H_

#include "Object3dKit.h"
#include "SoPointKit.h"
#include "SoLineKit.h"

#ifdef WIN32
#include <SoWinLeaveScope.h>
#endif

class SoPolygonKit: public Object3dKit
{ 
  SO_KIT_HEADER(SoPolygonKit);
  
  //set parts  
  SO_KIT_CATALOG_ENTRY_HEADER(objectVertexProperty);
  SO_KIT_CATALOG_ENTRY_HEADER(object);
  SO_KIT_CATALOG_ENTRY_HEADER(object_c);

  
public: 
  SoSFVec3f backColor;
  std::vector<SoFieldSensor*> ObjectSensor;
  std::vector<Object3dKit*> Points;
  SoSFInt32 NumofPoints;
  SoMFName pointsName;

  SoSFFloat lineThickness;// default = 3

  BODY* a_Polygon;
  
  static void initClass(); 
  SoPolygonKit(
    ); 
  ~SoPolygonKit(
    );
//  SoPolygonKit(
//    int number
//    ); 
  // constructor for 
  // * Polygon generated by three points
  SoPolygonKit(
    int number,
    std::vector<Object3dKit*> points,
	int numofPoints,
	SbBool constrained    
	);
  void initSoPolygonKit(
    );
  float getDistance(
    SbVec3f penSPAposition
    );
  static void nameUpdate(
    void *data,
    SoSensor *sensor
    );
//  FACE* GetPlaneFace();
  
protected:
  virtual void OnChange();
  
  void CreateSensors();
  
  void UpdateAcisObject();
  
  int Triangulate(FACE* p_Face, SbVec3f* &p_VertexArray);

  int FacePlane(double planeSize, SPAvector* normalvector, SPAposition Point, SbVec3f* &VertexArray);

  /** This will detach/attach the fieldSensor.
  * It is called at the end of the constructor (to attach).
  * and at the start/end of SoBaseKit::readInstance()
  * and on the new copy at the start/end of SoBaseKit::copy().
  * Returns the state of the node when this was called.
  */
  virtual SbBool setUpConnections(SbBool onOff, SbBool doItAlways = FALSE);
};

#ifdef WIN32
#include <SoWinEnterScope.h>
#endif

#endif//_SOPOLYGONKIT_H_
