<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by Architekt (Vienna University of Technology) -->
<!--W3C Schema generated by XMLSPY v5 rel. 2 U (http://www.xmlspy.com)-->
<xs:schema targetNamespace="http://www.studierstube.org/april" xmlns:xsdoc="http://www.studierstube.org/xsdoc" xmlns="http://www.studierstube.org/april" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <xs:annotation>
        <xs:documentation>
Author: Florian Ledermann (<a href="mailto:ledermann@ims.tuwien.ac.at">ledermann@ims.tuwien.ac.at</a>)
<p>
To get an overview, the <a href="april-schema.png">graphical schema representation</a> 
  is the recommended entry point.</p>
            <p>Links to
<ul>
                    <li>
                        <a href="april.dtd">APRIL DTD (V 1.0 draft)</a>
                    </li>
                    <li>
                        <a href="april.xsd">APRIL Schema (V 1.0 draft)</a>
                    </li>
                    <li>
                        <a href="aprildemo.apr">APRIL example file</a>
                    </li>
                </ul>
            </p>
            <xsdoc:note> 
APRIL Terminology

Roles:
  <ul>
                    <li>Story Author</li>
                    <li>Story Implementer</li>
                    <li>Component Implementer</li>
                    <li>Platform Developer</li>
                    <li>Showcase Administrator</li>
                    <li>Showcase Operator</li>
                    <li>Showcase Visitor</li>
                </ul>

Components:

  <ul>
                    <li>Story Authoring Tool</li>
                    <li>Translator</li>
                    <li>Target Platform</li>
                    <li>Story Engine</li>
                    <li>Target Showcase</li>
                </ul>
            </xsdoc:note>

APRIL provides language elements for describing
<ul>
                <li>The input and output devices of a system and its users (Low-level interaction)</li>
                <li>Interaction modalities available to the user (high-level interaction)</li>
                <li>Binding of abstract story concepts to concrete media objects.</li>
                <li>Basic arrangement of media resources (models, sounds, images, ...) in time and space through animation.</li>
                <li>Temporal and logical progression of the presentation (flow control)</li>
            </ul>
Each of these parts has its own section in the APRIL config file. Therefore, each presentation contains five sections:

&lt;config&gt;
...
&lt;/config&gt;

Contains configuration information for input and output devices. Can be loaded 
from file if src=”...” is specified.

&lt;interaction&gt;
...
&lt;/interaction&gt;

High-level interaction definitions.
<note>To be discussed! This is not in the spec yet...</note>

&lt;definitions&gt;
...
&lt;/definitions&gt;

This section defines the used resources (models, sounds, scripts,...).

&lt;story&gt;
...
&lt;/story&gt;

Describes the flow of the presentation in terms of conditions for triggering scenes etc. The child elements of this section allow for showing scenes and defining the relation between this scenes with respect to the time-flow.
</xs:documentation>
    </xs:annotation>
    <!-- -->
    <xs:simpleType name="FloatList">
        <xs:annotation>
            <xs:documentation>list of double values, base type for restricted data types like vectors, rotations, etc.</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:double"/>
    </xs:simpleType>
    <xs:simpleType name="IntegerList">
        <xs:annotation>
            <xs:documentation>list of integer values, useful for list of indices.</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:integer"/>
    </xs:simpleType>
    <xs:simpleType name="Vec2f">
        <xs:restriction base="FloatList">
            <xs:length value="2"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Vec3f">
        <xs:annotation>
            <xs:documentation>a simple type storing three float values separated by spaces.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="FloatList">
            <xs:length value="3" fixed="false"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Vec4f">
        <xs:annotation>
            <xs:documentation>a simple type storing four float values separated by spaces.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="FloatList">
            <xs:length value="4" fixed="false"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Vec2i">
        <xs:annotation>
            <xs:documentation>a simple type storing two integer values separated by spaces.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="IntegerList">
            <xs:length value="2" fixed="false"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ScreenSizeType">
        <xs:union memberTypes="Vec2i">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="fullscreen"/>
                </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:union>
    </xs:simpleType>
    <!-- -->
    <xs:element name="april">
        <xs:annotation>
            <xs:documentation>The root element of every APRIL file.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="setup" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Wrapper element for input and output device configuration. The config section of the APRIL file specified as src is imported (if present), and overlayed with the information of the local config section (this means that local elements with the same id as in the src file, and their child-elements, override the elements specified in the src file). The low-level tracking configuration is done in the OpenTracker file specified with the otsource attribute, or inline in the corresponding interaction elements (see below).</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="host" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation>Wrapper element for all devices connected to a single computer.</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="screen" maxOccurs="unbounded">
                                            <xs:annotation>
                                                <xs:documentation>Configures a VGA output port.</xs:documentation>
                                            </xs:annotation>
                                            <xs:complexType>
                                                <xs:attribute name="resolution" type="Vec2i" use="optional" default="1600 1200">
                                                    <xs:annotation>
                                                        <xs:documentation>Screen resolution in pixels.</xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="display" maxOccurs="unbounded">
                                            <xs:annotation>
                                                <xs:documentation>Defines a display for rendering content on. The containing displaytracking and/or headtracking elements define optional tracking, this elements configures the position of the display window on an output port, its resolution and the default camera pose in the world.</xs:documentation>
                                            </xs:annotation>
                                            <xs:complexType>
                                                <xs:all>
                                                    <xs:element name="headtracking" type="TrackableType" minOccurs="0">
                                                        <xs:annotation>
                                                            <xs:documentation>Configures the headtracking for the parent display element.</xs:documentation>
                                                        </xs:annotation>
                                                    </xs:element>
                                                    <xs:element name="displaytracking" type="TrackableType" minOccurs="0">
                                                        <xs:annotation>
                                                            <xs:documentation>Configures tracking of the center of the display.</xs:documentation>
                                                        </xs:annotation>
                                                    </xs:element>
                                                    <xs:element name="pointer" minOccurs="0">
                                                        <xs:annotation>
                                                            <xs:documentation>Configures a 2d-pointing device for the display, which can be used to interact with widgets or point on real/virtual tings.</xs:documentation>
                                                        </xs:annotation>
                                                    </xs:element>
                                                </xs:all>
                                                <xs:attribute name="id" type="xs:ID" use="optional"/>
                                                <xs:attribute name="screen" type="xs:int" use="optional" default="1">
                                                    <xs:annotation>
                                                        <xs:documentation>The screen number this display window should be rendered on.</xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="screenPosition" type="ScreenSizeType" use="optional" default="0 0">
                                                    <xs:annotation>
                                                        <xs:documentation>position of the top left corner of the display window on the screen in pixels.</xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="screenSize" type="ScreenSizeType" use="optional" default="fullscreen"/>
                                                <xs:attribute name="stereo" type="xs:boolean" use="optional" default="false"/>
                                                <xs:attribute name="worldPosition" type="Vec3f" use="optional" default="0 0 0"/>
                                                <xs:attribute name="worldSize" type="Vec2f" use="optional" default="0.4 0.3"/>
                                                <xs:attribute name="worldOrientation" type="Vec4f" use="optional" default="0 1 0 0"/>
                                                <xs:attribute name="eyeOffsetL" type="Vec3f" use="optional" default="-0.03 0 0"/>
                                                <xs:attribute name="eyeOffsetR" type="Vec3f" use="optional" default="0.03 0 0"/>
                                                <xs:attribute name="viewpointPosition" type="Vec3f" use="optional" default="0 0 0.5"/>
                                                <xs:attribute name="mode" use="optional" default="AR">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:string">
                                                            <xs:enumeration value="AR"/>
                                                            <xs:enumeration value="VR"/>
                                                            <xs:enumeration value="light"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="debug" type="xs:boolean" use="optional" default="false"/>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="station" type="TrackableType" minOccurs="0" maxOccurs="unbounded">
                                            <xs:annotation>
                                                <xs:documentation>Defines a tracked artifact like a marker.</xs:documentation>
                                            </xs:annotation>
                                        </xs:element>
                                        <xs:element name="button" minOccurs="0" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attribute name="id" type="xs:ID" use="required"/>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="id" type="xs:ID"/>
                        <xs:attribute name="src" type="xs:anyURI">
                            <xs:annotation>
                                <xs:documentation>URI of external file containing the config section to use. If a src is specified, any inline specifications will be ignored and the configuration specified in the given file will be used.
<question>We should support something like overlays, i.e. the config loaded from file is overlayed with the inline definitions!</question>
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="otfile" type="xs:anyURI">
                            <xs:annotation>
                                <xs:documentation>URI of OpenTracker config file to use as a basis for the tracking configuration. Named OpenTracker nodes referenced in the APRIL file are referenced from this file.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="workspacepath" type="xs:anyURI">
                            <xs:annotation>
                                <xs:documentation>Path to the executable(s) of the traget platform.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="presentation" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>This is the top-level wrapper element of a APRIL presentation.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="story">
                                <xs:annotation>
                                    <xs:documentation>The content of this element specifies the logic (or the "story") of the presentation as a hierarchical state machine. The syntax is derived from XMI, the official UML-to-XML serialization syntax, but simplified for better readability.</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:restriction base="Scene">
                                            <xs:sequence>
                                                <xs:element name="annotation" minOccurs="0" maxOccurs="unbounded"/>
                                                <xs:choice>
                                                    <xs:sequence>
                                                        <xs:element ref="scene" minOccurs="0" maxOccurs="unbounded"/>
                                                        <xs:element ref="transition" minOccurs="0" maxOccurs="unbounded"/>
                                                    </xs:sequence>
                                                    <xs:sequence>
                                                        <xs:element name="concurrentScene" type="Scene" maxOccurs="unbounded"/>
                                                    </xs:sequence>
                                                </xs:choice>
                                            </xs:sequence>
                                            <xs:attribute name="initial" use="prohibited"/>
                                            <xs:attribute name="name" use="optional"/>
                                        </xs:restriction>
                                    </xs:complexContent>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="cast">
                                <xs:annotation>
                                    <xs:documentation>This element holds all references to used media resources (models, images, sounds, scripts etc.).</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:choice maxOccurs="unbounded">
                                            <xs:element name="stage" type="VisibleActorType" minOccurs="0" maxOccurs="unbounded">
                                                <xs:annotation>
                                                    <xs:documentation>Defines geometry as a proxy for real world objects. In augmented reality applications, this is not displayed, but used for correct rendering of intersections between virtual and real content, for example. In VR and authoring setups, these objects may be rendered as regular scene objects. </xs:documentation>
                                                </xs:annotation>
                                            </xs:element>
                                            <xs:element name="actor" minOccurs="0" maxOccurs="unbounded">
                                                <xs:complexType>
                                                    <xs:sequence>
                                                        <xs:element name="field" minOccurs="0" maxOccurs="unbounded">
                                                            <xs:complexType>
                                                                <xs:attribute name="id" type="xs:normalizedString" use="required"/>
                                                                <xs:attribute name="value" type="xs:string" use="required"/>
                                                            </xs:complexType>
                                                        </xs:element>
                                                        <xs:element name="part" minOccurs="0" maxOccurs="unbounded"/>
                                                    </xs:sequence>
                                                    <xs:attribute name="id" type="xs:ID" use="required"/>
                                                    <xs:attribute name="src" type="xs:anyURI" use="required"/>
                                                </xs:complexType>
                                            </xs:element>
                                            <xs:element name="light" minOccurs="0" maxOccurs="unbounded"/>
                                            <xs:element name="sound" minOccurs="0" maxOccurs="unbounded">
                                                <xs:annotation>
                                                    <xs:documentation>A sound to be played in the presentation.</xs:documentation>
                                                </xs:annotation>
                                            </xs:element>
                                        </xs:choice>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="behaviors">
                                <xs:annotation>
                                    <xs:documentation>The behaviours section binds behaviours of objects to states of the story logic.</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="behavior" minOccurs="0" maxOccurs="unbounded">
                                            <xs:annotation>
                                                <xs:documentation>A behavior is a set of property changes bound to a state of the tory logic. Whenever the state is entered, the actions defined in the "entry" sub-element are performed. If the story is still in this state after perfomring the entry actions, the "do" actions are performed, and can be interrupted at any time by leaving the state. Upon leving the state, the "exit" actions are guaranteed to perform.</xs:documentation>
                                            </xs:annotation>
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="entry" minOccurs="0">
                                                        <xs:annotation>
                                                            <xs:documentation>The "entry" actions are performed when the associated state is entered. Actions defined here are guaranteed to perform, now matter how long the story remains in this state. Actions should therefore only be "set" and "connect", and very short "animate"ions.</xs:documentation>
                                                        </xs:annotation>
                                                        <xs:complexType>
                                                            <xs:complexContent>
                                                                <xs:extension base="LabelType">
                                                                    <xs:attribute name="duration" type="xs:duration" use="optional" default="PT5.0S"/>
                                                                </xs:extension>
                                                            </xs:complexContent>
                                                        </xs:complexType>
                                                    </xs:element>
                                                    <xs:element name="do" type="LabelType" minOccurs="0">
                                                        <xs:annotation>
                                                            <xs:documentation>Actions in this group are performed as long as the story is in the associated state. Note that actions might not be called at all, if the state is immediately left. This is the only place where looped animations make sense, because they can be cancelled by leaving the state. </xs:documentation>
                                                        </xs:annotation>
                                                    </xs:element>
                                                    <xs:element name="exit" type="LabelType" minOccurs="0">
                                                        <xs:annotation>
                                                            <xs:documentation>Actions defined here are executed when the associated state is left. They are guaranteed to perform.</xs:documentation>
                                                        </xs:annotation>
                                                    </xs:element>
                                                </xs:sequence>
                                                <xs:attribute name="scene" type="xs:IDREF" use="required"/>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="interactions">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="event" minOccurs="0" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:choice maxOccurs="unbounded">
                                                        <xs:element ref="timeout"/>
                                                        <xs:element ref="disabled"/>
                                                        <xs:element ref="always"/>
                                                        <xs:element ref="buttonaction"/>
                                                        <xs:element ref="rayaction"/>
                                                        <xs:element name="evaluator">
                                                            <xs:complexType>
                                                                <xs:complexContent>
                                                                    <xs:extension base="InteractionType">
                                                                        <xs:attribute name="actor" type="xs:IDREF" use="required"/>
                                                                        <xs:attribute name="attribute" type="xs:string" use="required"/>
                                                                        <xs:attribute name="comparator" use="optional" default="equal">
                                                                            <xs:simpleType>
                                                                                <xs:restriction base="xs:NMTOKEN">
                                                                                    <xs:enumeration value="isInside"/>
                                                                                    <xs:enumeration value="notInside"/>
                                                                                    <xs:enumeration value="lessThan"/>
                                                                                    <xs:enumeration value="greaterThan"/>
                                                                                    <xs:enumeration value="lessOrEqual"/>
                                                                                    <xs:enumeration value="greaterOrEqual"/>
                                                                                    <xs:enumeration value="equal"/>
                                                                                    <xs:enumeration value="notEqual"/>
                                                                                </xs:restriction>
                                                                            </xs:simpleType>
                                                                        </xs:attribute>
                                                                        <xs:attribute name="value" type="xs:string" use="required"/>
                                                                    </xs:extension>
                                                                </xs:complexContent>
                                                            </xs:complexType>
                                                        </xs:element>
                                                    </xs:choice>
                                                </xs:sequence>
                                                <xs:attribute name="id" type="xs:ID" use="required"/>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="id" type="xs:ID" use="required">
                            <xs:annotation>
                                <xs:documentation>Unique ID for this presentation. Depending on the implementation of the transformation of APRIL to a specific platform, this will be used for generating file- or folder names for the resulting files.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="name" type="xs:string" use="optional" default="Unnamed Presentation">
                            <xs:annotation>
                                <xs:documentation>The name of the presentation. This can be used by target platforms as a human-readable title for the presentation.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- -->
    <xs:element name="scene" type="Scene">
        <xs:annotation>
            <xs:documentation>A state in a hierarchical state machine.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="transition">
        <xs:annotation>
            <xs:documentation>A transition from one state to another, specifying the transition event name.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="event" type="xs:Name" use="required"/>
            <xs:attribute name="source" type="xs:Name" use="required"/>
            <xs:attribute name="target" type="xs:Name" use="required"/>
            <xs:attribute name="guard" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <!-- -->
    <xs:complexType name="InteractionAutoType" abstract="false">
        <xs:complexContent>
            <xs:extension base="InteractionType"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="InteractionType" abstract="true">
        <xs:attribute name="auto" type="xs:boolean" use="optional" default="false"/>
    </xs:complexType>
    <xs:complexType name="InteractionActionType" abstract="true">
        <xs:complexContent>
            <xs:extension base="InteractionType"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="InteractionActionSceneType">
        <xs:complexContent>
            <xs:extension base="InteractionActionType">
                <xs:attribute name="target" type="xs:IDREF" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="InteractionActionSceneRayType">
        <xs:complexContent>
            <xs:extension base="InteractionActionSceneType"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="InteractionActionButtonType">
        <xs:complexContent>
            <xs:extension base="InteractionActionType">
                <xs:attribute name="virtual" type="xs:boolean" use="optional" default="true"/>
                <xs:attribute name="caption" type="xs:string" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- -->
    <xs:element name="interaction" type="InteractionType" abstract="true">
        <xs:annotation>
            <xs:documentation>The base element from which all interaction elements are derived. Allows for exchangeability of interaction elements.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="action" type="InteractionActionType" substitutionGroup="interaction"/>
    <xs:element name="sceneaction" type="InteractionActionSceneType" substitutionGroup="action"/>
    <xs:element name="rayaction" type="InteractionActionSceneRayType" substitutionGroup="sceneaction"/>
    <xs:element name="buttonaction" type="InteractionActionButtonType" substitutionGroup="action"/>
    <xs:element name="timeout" substitutionGroup="interaction">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="InteractionAutoType"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="disabled" type="InteractionAutoType" substitutionGroup="interaction"/>
    <xs:element name="always" type="InteractionAutoType" substitutionGroup="interaction"/>
    <xs:complexType name="ActorType" mixed="false">
        <xs:sequence>
            <xs:element name="inline" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>You can specify content inline by wrapping it with this tag and putting it as a first child of the actor element. Note that if a src attribute is present on the parent element, the inline content will be treated as if specified within an alt tag, i.e. only used when the content specified by src cannot be retrieved.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="alt" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:complexContent>
                        <xs:restriction base="ActorType">
                            <xs:sequence>
                                <xs:element name="inline" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>You can specify content inline by wrapping it with this tag and putting it as a first child of the actor element. Note that if a src attribute is present on the parent element, the inline content will be treated as if specified within an alt tag, i.e. only used when the content specified by src cannot be retrieved.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                            <xs:attribute name="id" use="prohibited"/>
                        </xs:restriction>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The MIME-type of the content.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="src" type="xs:anyURI" use="optional">
            <xs:annotation>
                <xs:documentation>The URI to load the content from.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="xs:ID" use="required"/>
    </xs:complexType>
    <xs:complexType name="ActionType">
        <xs:attribute name="attributeName" type="xs:string" use="required"/>
        <xs:attribute name="actor" type="xs:IDREF" use="required"/>
    </xs:complexType>
    <xs:complexType name="LabelType">
        <xs:sequence>
            <xs:sequence maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>For every actor, you can specify a sequence of set, animate and connect statements here.</xs:documentation>
                </xs:annotation>
                <xs:element name="set" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>Sets the given attribute to the given value.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:complexContent>
                            <xs:extension base="ActionType">
                                <xs:attribute name="to" type="xs:string" use="required"/>
                                <xs:attribute name="time" type="xs:duration" use="optional" default="PT0.0S"/>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xs:element>
                <xs:element name="animate" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>Animates the given attribute. For further information, see the SMIL animation spec.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:complexContent>
                            <xs:extension base="ActionType">
                                <xs:attribute name="begin" type="xs:duration" use="optional"/>
                                <xs:attribute name="duration" type="xs:duration" use="required"/>
                                <xs:attribute name="to" type="xs:string" use="optional"/>
                                <xs:attribute name="by" type="xs:string" use="optional"/>
                                <xs:attribute name="calcMode" type="xs:token" use="optional" default="linear"/>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xs:element>
                <xs:element name="connect" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>Connects an attribute of the actor to the attribute of another actor. If persist=true, this connection persists also if the state is left, otherwise it is disconnected again.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:complexContent>
                            <xs:extension base="ActionType">
                                <xs:attribute name="fromActor" type="xs:IDREF" use="required"/>
                                <xs:attribute name="fromAttribute" type="xs:string" use="required"/>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xs:element>
                <xs:element name="control" minOccurs="0" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:complexContent>
                            <xs:extension base="ActionType">
                                <xs:attribute name="min" type="xs:anySimpleType" use="optional"/>
                                <xs:attribute name="max" type="xs:anySimpleType" use="optional"/>
                                <xs:attribute name="label" type="xs:string" use="optional"/>
                                <xs:attribute name="station" type="xs:string" use="optional"/>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="StateType">
        <xs:attribute name="id" type="xs:ID" use="optional"/>
        <xs:attribute name="name" type="xs:ID" use="optional"/>
        <xs:attribute name="initial" type="xs:boolean" use="optional" default="false"/>
    </xs:complexType>
    <xs:complexType name="TrackableType">
        <xs:sequence>
            <xs:any namespace="http://www.studierstube.org/opentracker" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="optional"/>
        <xs:attribute name="otsource" type="xs:string" use="optional"/>
    </xs:complexType>
    <xs:complexType name="VisibleActorType">
        <xs:complexContent>
            <xs:extension base="ActorType">
                <xs:attribute name="position" type="Vec3f" use="optional" default="0 0 0"/>
                <xs:attribute name="orientation" type="Vec4f" use="optional" default="0 0 1 0"/>
                <xs:attribute name="scale" type="Vec3f" use="optional" default="1 1 1"/>
                <xs:attribute name="transparency" type="xs:float" use="optional" default="0.0"/>
                <xs:attribute name="visible" type="xs:boolean" use="optional" default="true"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="contentType" mixed="true">
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="use">
                    <xs:complexType>
                        <xs:attribute name="id" type="xs:IDREF" use="required"/>
                    </xs:complexType>
                </xs:element>
                <xs:element name="id"/>
                <xs:element name="optional">
                    <xs:complexType>
                        <xs:complexContent>
                            <xs:extension base="contentType">
                                <xs:attribute name="require" type="xs:IDREF" use="required"/>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="Scene">
        <xs:sequence>
            <xs:element name="annotation" minOccurs="0" maxOccurs="unbounded"/>
            <xs:choice>
                <xs:sequence>
                    <xs:element ref="scene" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element ref="transition" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:sequence>
                    <xs:element name="concurrentScene" type="Scene" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="name" type="xs:ID" use="required"/>
        <xs:attribute name="initial" type="xs:boolean" use="optional" default="false"/>
    </xs:complexType>
</xs:schema>
