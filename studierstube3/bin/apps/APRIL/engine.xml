<story xmlns="http://www.studierstube.org/vsml" xmlns:ot="http://www.studierstube.org/opentracker" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            
   <concurrentSubState name="story_main">
                
      <state name="Emptyness" initial="true">
                    
         <annotation>The Showcase contains a white box, which is dimly lit by the light projector. Nothing else can be         seen, the system waits for a user to approach.</annotation>
                
      </state>
                
      <compositeState name="Introduction">
                    
         <state name="Introducing_Goblin">
                        
            <annotation>Ipi enters the scene (through a teleport or something). Occlusion Shadows are not used at this moment. Ipi introduces itself, complaining that it is only half-transparent.</annotation>
                    
         </state>
                    
         <state name="Introducing_Showcase">
                        
            <annotation>Ipi clicks its fingers, and occlusion shadows are turned on. Ipi is happy, and introduces the virtual showcase. Afterwards it offers the user to explain one topic in more detail.</annotation>
                    
         </state>
                    
         <state name="Ask_User">
                        
            <annotation>Depending on the users choice, Ipi expains one technical topic of the VS in more detail (maybe video etc.). After having at least one detailed explanation, the user can also say "good bye" to end the presentation.</annotation>
                    
         </state>
                    
         <transition event="continue" source="Introducing_Goblin" target="Introducing_Showcase"/>
                    
         <transition event="continue" source="Introducing_Showcase" target="Ask_User"/>
                
      </compositeState>
                
      <state name="Explain_Interaction"/>
                
      <state name="Explain_Projection"/>
                
      <state name="Explain_Lighting"/>
                
      <state name="Vanish">
                    
         <annotation>Ipi jumps onto the box, opening a (virtual) trap door that hasn't been there before, and jumps in.</annotation>
                
      </state>
                
      <transition event="start" source="Emptyness" target="Introduction:Introducing_Goblin"/>
                
      <transition event="asks_interaction" source="Introduction:Ask_User" target="Explain_Interaction"/>
                
      <transition event="asks_projection" source="Introduction:Ask_User" target="Explain_Projection"/>
                
      <transition event="asks_lighting" source="Introduction:Ask_User" target="Explain_Lighting"/>
                
      <transition event="ask_user" source="Explain_Interaction" target="Introduction:Ask_User"/>
                
      <transition event="ask_user" source="Explain_Projection" target="Introduction:Ask_User"/>
                
      <transition event="ask_user" source="Explain_Lighting" target="Introduction:Ask_User"/>
                
      <transition event="bye" guard="Story in Someting_Explained" source="Introduction:Ask_User" target="Vanish"/>
                
      <transition event="restart" source="Vanish" target="Emptyness"/>
            
   </concurrentSubState>
            
   <concurrentSubState name="ipi">
                
      <state name="Nothing_Explained" initial="true"/>
                
      <state name="Something_Explained">
                    
         <annotation>This is a helper state to keep track if already one explanation has been given to the user. Note the guard expression in the "bye" transition above, where this is used.</annotation>
                
      </state>
                
      <transition event="asks_interaction" source="Nothing_Explained" target="Something_Explained" guard="Introduction"/>
                
      <transition event="asks_projection" source="Nothing_Explained" target="Something_Explained" guard="Introduction"/>
                
      <transition event="asks_lighting" source="Nothing_Explained" target="Something_Explained" guard="Introduction"/>
                
      <transition event="restart" source="Something_Explained" target="Nothing_Explained"/>
            
   </concurrentSubState>
        
</story>