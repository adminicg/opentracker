#Inventor V2.1 ascii

DEF simple SoApplicationKit {
    appGeom Separator {
        Texture2 { filename "../apps/fingerfarben/fingerfarben.gif" }
    }

    info Info {}

contextKit DEF simple_context SoContextKit {

        templatePipSheet Separator {
            Separator {
              RotationXYZ {axis  X angle 1.57 }
              Material { diffuseColor 0 1 0 }
              DEF BUTTON_EIN SoPushButton { 
                width 5 depth 5 height 2 
              }
              Translation { translation 5 0 0 }
              Material { diffuseColor 1 0 0 }
              DEF BUTTON_AUS SoPushButton { 
                width 5 depth 5 height 2 
              }
              Translation { translation 5 0 0 }
              Material { diffuseColor 1 1 0 }
              DEF BUTTON_GO SoPushButton { 
                width 5 depth 5 height 2 
              }
              Translation { translation 5 0 0 }
              Material { diffuseColor 1 1 0 }
              DEF BUTTON_X SoPushButton { 
                width 5 depth 5 height 2 
              }
            }
        }

        clonePipSheet FALSE

        windowGroup Group {
        	SoWindowKit {
        	    size 0.5 0.5 0.5
        	
        		clientVolume Separator {
                    SoClassLoader {
                        className   "SoStateEngine"
                        fileName    "../apps/APRIL/april"
                    }   
                    Font { size 0.02 }
                    Transform { translation -0.2 0.2 0 }
                    Text3 {
                        string = DEF STATE_ENGINE SoStateEngine {
                            specFile "../apps/APRIL/engine.xml"
                            eventIn = StringFanIn {
                                in0 = DEF EIN_TRIGGER ConditionalTrigger {
                                    boolIn = USE BUTTON_EIN.on
                                    triggerBool TRUE
                                    token "start"
                                }.tokenOut
                                in1 = DEF AUS_TRIGGER ConditionalTrigger {
                                    boolIn = USE BUTTON_AUS.on
                                    triggerBool TRUE
                                    token "continue"
                                }.tokenOut
                                in2 = DEF GO_TRIGGER ConditionalTrigger {
                                    boolIn = USE BUTTON_GO.on
                                    triggerBool TRUE
                                    token "asks_interaction"
                                }.tokenOut
                                in3 = DEF GO_TRIGGER ConditionalTrigger {
                                    boolIn = USE BUTTON_X.on
                                    triggerBool TRUE
                                    token "ask_user"
                                }.tokenOut
#                                in2 = DEF TOGGLE_TRIGGER ConditionalTrigger {
#                                    boolIn = USE BUTTON_TOGGLE.on
#                                    triggerBool TRUE
#                                    token = DEF FAN StringFanIn {
#                                        in0 = DEF S_EIN_TRIGGER ConditionalTrigger {
#                                            triggerString "ein"
#                                            stringIn = USE STATE_ENGINE.currentState
#                                            token "ausschalten"
#                                        }.tokenOut
#                                        in1 = DEF S_AUS_TRIGGER ConditionalTrigger {
#                                            triggerString "aus"
#                                            stringIn = USE STATE_ENGINE.currentState
#                                            token "einschalten"
#                                        }.tokenOut
#                                    }.out
#                                }.tokenOut
#                                
#                                in3 = DEF FAR_TRIGGER ConditionalTrigger {
#                                    floatIn = DEF DIST DecomposeVec3f {
#                                        vector = SoTrakEngine {
#                                            station 0
#                                        }.translation
#                                    }.y
#                                    triggerFloat -0.1
#                                    comparison LESS_THAN
#                                    token "einschalten"
#                                }.tokenOut
                                in4 = DEF NEAR_TRIGGER ConditionalTrigger {
                                    floatIn = DEF DIST DecomposeVec3f {
                                        vector = SoTrakEngine {
                                            station 0
                                        }.translation
                                    }.y
                                    triggerFloat -0.1
                                    comparison GREATER_OR_EQUAL
                                    token "ausschalten"
                                }.tokenOut
                                
                            }.out
                        }.currentState
                        justification LEFT
                    }
                    Transform { translation 0 -0.05 0 }
                    Text3 {
                        string = USE STATE_ENGINE.availableTransitions
                        justification LEFT
                    }
                             		    
                }
            }
        }
    }
}
