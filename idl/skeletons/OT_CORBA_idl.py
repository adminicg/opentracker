# Python stubs generated by omniidl from idl/OT_CORBA.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(2,0, __file__)

try:
    _omniORB_StructBase = omniORB.StructBase
except AttributeError:
    class _omniORB_StructBase: pass


#
# Start of module "CORBAModule"
#
__name__ = "CORBAModule"
_0_CORBAModule = omniORB.openModule("CORBAModule", r"idl/OT_CORBA.idl")
_0_CORBAModule__POA = omniORB.openModule("CORBAModule__POA", r"idl/OT_CORBA.idl")

_0_CORBAModule.CORBAModule__doc__ = "This is the CORBA Module for OpenTracker"

# typedef ... Position
class Position:
    _NP_RepositoryId = "IDL:CORBAModule/Position:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CORBAModule.Position = Position
_0_CORBAModule._d_Position  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_float, 3)
_0_CORBAModule._ad_Position = (omniORB.tcInternal.tv_alias, Position._NP_RepositoryId, "Position", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_float, 3))
_0_CORBAModule._tc_Position = omniORB.tcInternal.createTypeCode(_0_CORBAModule._ad_Position)
omniORB.registerType(Position._NP_RepositoryId, _0_CORBAModule._ad_Position, _0_CORBAModule._tc_Position)
del Position

# typedef ... Orientation
class Orientation:
    _NP_RepositoryId = "IDL:CORBAModule/Orientation:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CORBAModule.Orientation = Orientation
_0_CORBAModule._d_Orientation  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_float, 4)
_0_CORBAModule._ad_Orientation = (omniORB.tcInternal.tv_alias, Orientation._NP_RepositoryId, "Orientation", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_float, 4))
_0_CORBAModule._tc_Orientation = omniORB.tcInternal.createTypeCode(_0_CORBAModule._ad_Orientation)
omniORB.registerType(Orientation._NP_RepositoryId, _0_CORBAModule._ad_Orientation, _0_CORBAModule._tc_Orientation)
del Orientation

# typedef ... Timestamp
class Timestamp:
    _NP_RepositoryId = "IDL:CORBAModule/Timestamp:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CORBAModule.Timestamp = Timestamp
_0_CORBAModule._d_Timestamp  = omniORB.tcInternal.tv_float
_0_CORBAModule._ad_Timestamp = (omniORB.tcInternal.tv_alias, Timestamp._NP_RepositoryId, "Timestamp", omniORB.tcInternal.tv_float)
_0_CORBAModule._tc_Timestamp = omniORB.tcInternal.createTypeCode(_0_CORBAModule._ad_Timestamp)
omniORB.registerType(Timestamp._NP_RepositoryId, _0_CORBAModule._ad_Timestamp, _0_CORBAModule._tc_Timestamp)
del Timestamp

# typedef ... Button
class Button:
    _NP_RepositoryId = "IDL:CORBAModule/Button:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CORBAModule.Button = Button
_0_CORBAModule._d_Button  = omniORB.tcInternal.tv_short
_0_CORBAModule._ad_Button = (omniORB.tcInternal.tv_alias, Button._NP_RepositoryId, "Button", omniORB.tcInternal.tv_short)
_0_CORBAModule._tc_Button = omniORB.tcInternal.createTypeCode(_0_CORBAModule._ad_Button)
omniORB.registerType(Button._NP_RepositoryId, _0_CORBAModule._ad_Button, _0_CORBAModule._tc_Button)
del Button

# typedef ... Confidence
class Confidence:
    _NP_RepositoryId = "IDL:CORBAModule/Confidence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CORBAModule.Confidence = Confidence
_0_CORBAModule._d_Confidence  = omniORB.tcInternal.tv_float
_0_CORBAModule._ad_Confidence = (omniORB.tcInternal.tv_alias, Confidence._NP_RepositoryId, "Confidence", omniORB.tcInternal.tv_float)
_0_CORBAModule._tc_Confidence = omniORB.tcInternal.createTypeCode(_0_CORBAModule._ad_Confidence)
omniORB.registerType(Confidence._NP_RepositoryId, _0_CORBAModule._ad_Confidence, _0_CORBAModule._tc_Confidence)
del Confidence

# interface Event
_0_CORBAModule._d_Event = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/Event:1.0", "Event")
omniORB.typeMapping["IDL:CORBAModule/Event:1.0"] = _0_CORBAModule._d_Event
_0_CORBAModule.Event = omniORB.newEmptyClass()
class Event :
    _NP_RepositoryId = _0_CORBAModule._d_Event[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.Event = Event
_0_CORBAModule._tc_Event = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_Event)
omniORB.registerType(Event._NP_RepositoryId, _0_CORBAModule._d_Event, _0_CORBAModule._tc_Event)

# Event operations and attributes
Event._d_hasAttribute = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
Event._d_delAttribute = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
Event._d_renAttribute = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
Event._d_clearAttributes = ((), (), None)
Event._d_printout = ((), (), None)
Event._d_getPrintOut = ((), ((omniORB.tcInternal.tv_string,0), ), None)
Event._d_timeStamp = ((), (), None)
Event._d_getSize = ((), (omniORB.tcInternal.tv_long, ), None)
Event._d_getPosition = ((), (omniORB.typeMapping["IDL:CORBAModule/Position:1.0"], ), None)
Event._d_getOrientation = ((), (omniORB.typeMapping["IDL:CORBAModule/Orientation:1.0"], ), None)
Event._d_getConfidence = ((), (omniORB.tcInternal.tv_float, ), None)
Event._d_getButton = ((), (omniORB.typeMapping["IDL:CORBAModule/Button:1.0"], ), None)
Event._d_setPosition = ((omniORB.typeMapping["IDL:CORBAModule/Position:1.0"], ), (), None)
Event._d_setOrientation = ((omniORB.typeMapping["IDL:CORBAModule/Orientation:1.0"], ), (), None)
Event._d_setConfidence = ((omniORB.tcInternal.tv_float, ), (), None)
Event._d_setButton = ((omniORB.typeMapping["IDL:CORBAModule/Button:1.0"], ), (), None)
Event._d_addAttribute = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
Event._d_getAttributeValueString = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# Event object reference
class _objref_Event (CORBA.Object):
    _NP_RepositoryId = Event._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def hasAttribute(self, *args):
        return _omnipy.invoke(self, "hasAttribute", _0_CORBAModule.Event._d_hasAttribute, args)

    def delAttribute(self, *args):
        return _omnipy.invoke(self, "delAttribute", _0_CORBAModule.Event._d_delAttribute, args)

    def renAttribute(self, *args):
        return _omnipy.invoke(self, "renAttribute", _0_CORBAModule.Event._d_renAttribute, args)

    def clearAttributes(self, *args):
        return _omnipy.invoke(self, "clearAttributes", _0_CORBAModule.Event._d_clearAttributes, args)

    def printout(self, *args):
        return _omnipy.invoke(self, "printout", _0_CORBAModule.Event._d_printout, args)

    def getPrintOut(self, *args):
        return _omnipy.invoke(self, "getPrintOut", _0_CORBAModule.Event._d_getPrintOut, args)

    def timeStamp(self, *args):
        return _omnipy.invoke(self, "timeStamp", _0_CORBAModule.Event._d_timeStamp, args)

    def getSize(self, *args):
        return _omnipy.invoke(self, "getSize", _0_CORBAModule.Event._d_getSize, args)

    def getPosition(self, *args):
        return _omnipy.invoke(self, "getPosition", _0_CORBAModule.Event._d_getPosition, args)

    def getOrientation(self, *args):
        return _omnipy.invoke(self, "getOrientation", _0_CORBAModule.Event._d_getOrientation, args)

    def getConfidence(self, *args):
        return _omnipy.invoke(self, "getConfidence", _0_CORBAModule.Event._d_getConfidence, args)

    def getButton(self, *args):
        return _omnipy.invoke(self, "getButton", _0_CORBAModule.Event._d_getButton, args)

    def setPosition(self, *args):
        return _omnipy.invoke(self, "setPosition", _0_CORBAModule.Event._d_setPosition, args)

    def setOrientation(self, *args):
        return _omnipy.invoke(self, "setOrientation", _0_CORBAModule.Event._d_setOrientation, args)

    def setConfidence(self, *args):
        return _omnipy.invoke(self, "setConfidence", _0_CORBAModule.Event._d_setConfidence, args)

    def setButton(self, *args):
        return _omnipy.invoke(self, "setButton", _0_CORBAModule.Event._d_setButton, args)

    def addAttribute(self, *args):
        return _omnipy.invoke(self, "addAttribute", _0_CORBAModule.Event._d_addAttribute, args)

    def getAttributeValueString(self, *args):
        return _omnipy.invoke(self, "getAttributeValueString", _0_CORBAModule.Event._d_getAttributeValueString, args)

    __methods__ = ["hasAttribute", "delAttribute", "renAttribute", "clearAttributes", "printout", "getPrintOut", "timeStamp", "getSize", "getPosition", "getOrientation", "getConfidence", "getButton", "setPosition", "setOrientation", "setConfidence", "setButton", "addAttribute", "getAttributeValueString"] + CORBA.Object.__methods__

omniORB.registerObjref(Event._NP_RepositoryId, _objref_Event)
_0_CORBAModule._objref_Event = _objref_Event
del Event, _objref_Event

# Event skeleton
__name__ = "CORBAModule__POA"
class Event (PortableServer.Servant):
    _NP_RepositoryId = _0_CORBAModule.Event._NP_RepositoryId


    _omni_op_d = {"hasAttribute": _0_CORBAModule.Event._d_hasAttribute, "delAttribute": _0_CORBAModule.Event._d_delAttribute, "renAttribute": _0_CORBAModule.Event._d_renAttribute, "clearAttributes": _0_CORBAModule.Event._d_clearAttributes, "printout": _0_CORBAModule.Event._d_printout, "getPrintOut": _0_CORBAModule.Event._d_getPrintOut, "timeStamp": _0_CORBAModule.Event._d_timeStamp, "getSize": _0_CORBAModule.Event._d_getSize, "getPosition": _0_CORBAModule.Event._d_getPosition, "getOrientation": _0_CORBAModule.Event._d_getOrientation, "getConfidence": _0_CORBAModule.Event._d_getConfidence, "getButton": _0_CORBAModule.Event._d_getButton, "setPosition": _0_CORBAModule.Event._d_setPosition, "setOrientation": _0_CORBAModule.Event._d_setOrientation, "setConfidence": _0_CORBAModule.Event._d_setConfidence, "setButton": _0_CORBAModule.Event._d_setButton, "addAttribute": _0_CORBAModule.Event._d_addAttribute, "getAttributeValueString": _0_CORBAModule.Event._d_getAttributeValueString}

Event._omni_skeleton = Event
_0_CORBAModule__POA.Event = Event
del Event
__name__ = "CORBAModule"
_0_CORBAModule.Event__doc__ = "The Event interface is a CORBA equivalent of the Event class used in OpenTracker"

# interface OTNode
_0_CORBAModule._d_OTNode = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/OTNode:1.0", "OTNode")
omniORB.typeMapping["IDL:CORBAModule/OTNode:1.0"] = _0_CORBAModule._d_OTNode
_0_CORBAModule.OTNode = omniORB.newEmptyClass()
class OTNode :
    _NP_RepositoryId = _0_CORBAModule._d_OTNode[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.OTNode = OTNode
_0_CORBAModule._tc_OTNode = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_OTNode)
omniORB.registerType(OTNode._NP_RepositoryId, _0_CORBAModule._d_OTNode, _0_CORBAModule._tc_OTNode)

# OTNode operations and attributes
OTNode._d_push = ((omniORB.typeMapping["IDL:CORBAModule/Event:1.0"], ), (), None)

# OTNode object reference
class _objref_OTNode (CORBA.Object):
    _NP_RepositoryId = OTNode._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def push(self, *args):
        return _omnipy.invoke(self, "push", _0_CORBAModule.OTNode._d_push, args)

    __methods__ = ["push"] + CORBA.Object.__methods__

omniORB.registerObjref(OTNode._NP_RepositoryId, _objref_OTNode)
_0_CORBAModule._objref_OTNode = _objref_OTNode
del OTNode, _objref_OTNode

# OTNode skeleton
__name__ = "CORBAModule__POA"
class OTNode (PortableServer.Servant):
    _NP_RepositoryId = _0_CORBAModule.OTNode._NP_RepositoryId


    _omni_op_d = {"push": _0_CORBAModule.OTNode._d_push}

OTNode._omni_skeleton = OTNode
_0_CORBAModule__POA.OTNode = OTNode
del OTNode
__name__ = "CORBAModule"
_0_CORBAModule.OTNode__doc__ = "The OTNode is the superclass of all the OpenTracker nodes that are also CORBA objects."

# interface OTSource
_0_CORBAModule._d_OTSource = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/OTSource:1.0", "OTSource")
omniORB.typeMapping["IDL:CORBAModule/OTSource:1.0"] = _0_CORBAModule._d_OTSource
_0_CORBAModule.OTSource = omniORB.newEmptyClass()
class OTSource (_0_CORBAModule.OTNode):
    _NP_RepositoryId = _0_CORBAModule._d_OTSource[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.OTSource = OTSource
_0_CORBAModule._tc_OTSource = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_OTSource)
omniORB.registerType(OTSource._NP_RepositoryId, _0_CORBAModule._d_OTSource, _0_CORBAModule._tc_OTSource)

# OTSource object reference
class _objref_OTSource (_0_CORBAModule._objref_OTNode):
    _NP_RepositoryId = OTSource._NP_RepositoryId

    def __init__(self):
        _0_CORBAModule._objref_OTNode.__init__(self)

    __methods__ = [] + _0_CORBAModule._objref_OTNode.__methods__

omniORB.registerObjref(OTSource._NP_RepositoryId, _objref_OTSource)
_0_CORBAModule._objref_OTSource = _objref_OTSource
del OTSource, _objref_OTSource

# OTSource skeleton
__name__ = "CORBAModule__POA"
class OTSource (_0_CORBAModule__POA.OTNode):
    _NP_RepositoryId = _0_CORBAModule.OTSource._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CORBAModule__POA.OTNode._omni_op_d)

OTSource._omni_skeleton = OTSource
_0_CORBAModule__POA.OTSource = OTSource
del OTSource
__name__ = "CORBAModule"

# interface OTSink
_0_CORBAModule._d_OTSink = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/OTSink:1.0", "OTSink")
omniORB.typeMapping["IDL:CORBAModule/OTSink:1.0"] = _0_CORBAModule._d_OTSink
_0_CORBAModule.OTSink = omniORB.newEmptyClass()
class OTSink (_0_CORBAModule.OTNode):
    _NP_RepositoryId = _0_CORBAModule._d_OTSink[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.OTSink = OTSink
_0_CORBAModule._tc_OTSink = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_OTSink)
omniORB.registerType(OTSink._NP_RepositoryId, _0_CORBAModule._d_OTSink, _0_CORBAModule._tc_OTSink)

# OTSink object reference
class _objref_OTSink (_0_CORBAModule._objref_OTNode):
    _NP_RepositoryId = OTSink._NP_RepositoryId

    def __init__(self):
        _0_CORBAModule._objref_OTNode.__init__(self)

    __methods__ = [] + _0_CORBAModule._objref_OTNode.__methods__

omniORB.registerObjref(OTSink._NP_RepositoryId, _objref_OTSink)
_0_CORBAModule._objref_OTSink = _objref_OTSink
del OTSink, _objref_OTSink

# OTSink skeleton
__name__ = "CORBAModule__POA"
class OTSink (_0_CORBAModule__POA.OTNode):
    _NP_RepositoryId = _0_CORBAModule.OTSink._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CORBAModule__POA.OTNode._omni_op_d)

OTSink._omni_skeleton = OTSink
_0_CORBAModule__POA.OTSink = OTSink
del OTSink
__name__ = "CORBAModule"

# interface Node
_0_CORBAModule._d_Node = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/Node:1.0", "Node")
omniORB.typeMapping["IDL:CORBAModule/Node:1.0"] = _0_CORBAModule._d_Node
_0_CORBAModule.Node = omniORB.newEmptyClass()
class Node :
    _NP_RepositoryId = _0_CORBAModule._d_Node[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.Node = Node
_0_CORBAModule._tc_Node = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_Node)
omniORB.registerType(Node._NP_RepositoryId, _0_CORBAModule._d_Node, _0_CORBAModule._tc_Node)

# Node operations and attributes
Node._d_register = ((omniORB.typeMapping["IDL:CORBAModule/OTNode:1.0"], ), (), None)
Node._d_deregister = ((omniORB.typeMapping["IDL:CORBAModule/OTNode:1.0"], ), (), None)

# Node object reference
class _objref_Node (CORBA.Object):
    _NP_RepositoryId = Node._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def register(self, *args):
        return _omnipy.invoke(self, "register", _0_CORBAModule.Node._d_register, args)

    def deregister(self, *args):
        return _omnipy.invoke(self, "deregister", _0_CORBAModule.Node._d_deregister, args)

    __methods__ = ["register", "deregister"] + CORBA.Object.__methods__

omniORB.registerObjref(Node._NP_RepositoryId, _objref_Node)
_0_CORBAModule._objref_Node = _objref_Node
del Node, _objref_Node

# Node skeleton
__name__ = "CORBAModule__POA"
class Node (PortableServer.Servant):
    _NP_RepositoryId = _0_CORBAModule.Node._NP_RepositoryId


    _omni_op_d = {"register": _0_CORBAModule.Node._d_register, "deregister": _0_CORBAModule.Node._d_deregister}

Node._omni_skeleton = Node
_0_CORBAModule__POA.Node = Node
del Node
__name__ = "CORBAModule"

# interface Source
_0_CORBAModule._d_Source = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/Source:1.0", "Source")
omniORB.typeMapping["IDL:CORBAModule/Source:1.0"] = _0_CORBAModule._d_Source
_0_CORBAModule.Source = omniORB.newEmptyClass()
class Source (_0_CORBAModule.Node):
    _NP_RepositoryId = _0_CORBAModule._d_Source[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.Source = Source
_0_CORBAModule._tc_Source = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_Source)
omniORB.registerType(Source._NP_RepositoryId, _0_CORBAModule._d_Source, _0_CORBAModule._tc_Source)

# Source object reference
class _objref_Source (_0_CORBAModule._objref_Node):
    _NP_RepositoryId = Source._NP_RepositoryId

    def __init__(self):
        _0_CORBAModule._objref_Node.__init__(self)

    __methods__ = [] + _0_CORBAModule._objref_Node.__methods__

omniORB.registerObjref(Source._NP_RepositoryId, _objref_Source)
_0_CORBAModule._objref_Source = _objref_Source
del Source, _objref_Source

# Source skeleton
__name__ = "CORBAModule__POA"
class Source (_0_CORBAModule__POA.Node):
    _NP_RepositoryId = _0_CORBAModule.Source._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CORBAModule__POA.Node._omni_op_d)

Source._omni_skeleton = Source
_0_CORBAModule__POA.Source = Source
del Source
__name__ = "CORBAModule"

# interface Sink
_0_CORBAModule._d_Sink = (omniORB.tcInternal.tv_objref, "IDL:CORBAModule/Sink:1.0", "Sink")
omniORB.typeMapping["IDL:CORBAModule/Sink:1.0"] = _0_CORBAModule._d_Sink
_0_CORBAModule.Sink = omniORB.newEmptyClass()
class Sink (_0_CORBAModule.Node):
    _NP_RepositoryId = _0_CORBAModule._d_Sink[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CORBAModule.Sink = Sink
_0_CORBAModule._tc_Sink = omniORB.tcInternal.createTypeCode(_0_CORBAModule._d_Sink)
omniORB.registerType(Sink._NP_RepositoryId, _0_CORBAModule._d_Sink, _0_CORBAModule._tc_Sink)

# Sink object reference
class _objref_Sink (_0_CORBAModule._objref_Node):
    _NP_RepositoryId = Sink._NP_RepositoryId

    def __init__(self):
        _0_CORBAModule._objref_Node.__init__(self)

    __methods__ = [] + _0_CORBAModule._objref_Node.__methods__

omniORB.registerObjref(Sink._NP_RepositoryId, _objref_Sink)
_0_CORBAModule._objref_Sink = _objref_Sink
del Sink, _objref_Sink

# Sink skeleton
__name__ = "CORBAModule__POA"
class Sink (_0_CORBAModule__POA.Node):
    _NP_RepositoryId = _0_CORBAModule.Sink._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CORBAModule__POA.Node._omni_op_d)

Sink._omni_skeleton = Sink
_0_CORBAModule__POA.Sink = Sink
del Sink
__name__ = "CORBAModule"

#
# End of module "CORBAModule"
#
__name__ = "OT_CORBA_idl"

#
# Docstrings
#

_0_CORBAModule.__doc__ = _0_CORBAModule.CORBAModule__doc__
_0_CORBAModule.Event.__doc__ = _0_CORBAModule.Event__doc__
_0_CORBAModule._objref_Event.__doc__ = _0_CORBAModule.Event__doc__
_0_CORBAModule.OTNode.__doc__ = _0_CORBAModule.OTNode__doc__
_0_CORBAModule._objref_OTNode.__doc__ = _0_CORBAModule.OTNode__doc__

_exported_modules = ( "CORBAModule", )

# The end.
