# This build script is targeted specifically towards Windows XP, 
# using Microsoft Visual Studio 7.1 (2003)
# Dependencies are copied from their source directories to
# the project directory

import sys, os
from glob import glob
from os.path import join
################################
#       Helper Functions       #
################################
def filterHeaders(files):
    #ACE includes some .cpp files
    #Xerces incldes some .c files
    for file in files:
        if str(file).endswith('.h') or \
                str(file).endswith('.hh') or \
                str(file).endswith('.hpp') or \
                str(file).endswith('.inl') or \
                str(file).endswith('.cpp') or \
                str(file).endswith('.c'):
            yield file

def filterStaticLibraries(files):
    for file in files:
        if str(file).endswith('.lib'):
            yield file

def filterDynamicLibraries(files):
    for file in files:
        if str(file).endswith('.dll'):
            yield file

def findRelativePath(root, target):
    # replace root with blank empty string
    relative_path = target.replace(root, "", 1) 
    if relative_path.startswith(os.sep):
        return relative_path[1:] # omit first separator
    return relative_path

def installHeaders(root_dir, include_dir, _prefix, _alias):
    _headers = []
    for dirpath, dirnames, filenames in os.walk(join(root_dir, include_dir)):
        relative_path = findRelativePath(root_dir, dirpath)
        headers = [join(dirpath, header) for header in filterHeaders(filenames)]
        target_dir = join(_prefix, 'include', relative_path)
        _headers += env.Install(target_dir, headers)
    env.Alias(_alias, _headers)
    return _headers

def installLibraries(lib_dir, _prefix, _alias):
    _libs = []
    for dirpath, dirnames, filenames in os.walk(join(lib_dir)):
        #relative_path = findRelativePath(root_dir, dirpath)
        libs = [join(dirpath, _lib) for _lib in filterStaticLibraries(filenames)] + \
            [join(dirpath, _lib) for _lib in filterDynamicLibraries(filenames)]
        target_dir = join(_prefix, 'lib')
        _libs += env.Install(target_dir, libs)
    env.Alias(_alias, _libs)
    return _libs

opts = Options('custom.py')
opts.Add(BoolOption('DEBUG', 'Set to build for debug', 0))

env = Environment (ENV = os.environ, options=opts)
# This is the project directory to install everything in
prefix = ARGUMENTS.get('PREFIX')
if prefix is None:
    print "No PREFIX has been specified"
    sys.exit(-1)

#########################################
# Install the ACE headers and libraries #
#########################################
try:
    ace_root_dir = os.environ['ACEROOT']
except KeyError:
    print "No ACEROOT has been specified"

ace_headers = installHeaders(ace_root_dir, 'ace', prefix, 'ace-headers')
ace_libraries = installLibraries(join(ace_root_dir, 'lib'), prefix, 'ace-libs')

############################################
# Install the Xerces headers and libraries #
############################################
try:
    xercesc_root_dir = os.environ['XERCESCROOT']
except KeyError:
    print "No XERCESCROOT has been specified"

xercesc_headers = installHeaders(join(xercesc_root_dir, 'src'), 'xercesc', prefix, 'xercesc-headers')
xercesc_debug_libs    = installLibraries(join(xercesc_root_dir, 'Build','Win32','VC7.1', 'Debug'), prefix, 'xercesc-debug-libs')
xercesc_release_libs = installLibraries(join(xercesc_root_dir, 'Build','Win32','VC7.1', 'Release'), prefix, 'xercesc-release-libs')
env.Alias('xercesc-libs', xercesc_debug_libs+xercesc_release_libs)

############################################
#            Build OpenTracker             #
############################################
env.Append(CPPPATH=['include', join(prefix,'include')])
env.Append(LIBPATH=[join(prefix,'lib')])
env.Append(LIBS = ['xerces-c_2', 'ACE'])
# Make copies of the current Environment
dllenv = env.Copy()
prgenv = env.Copy()
dllenv.Append(CCFLAGS=['/O2','/W3', '/EHsc', '/MD', '/Z7', '/FD', '/TP', '/GR'])
dllenv.Append(CPPDEFINES=['OPENTRACKER_EXPORTS', 'USING_SCONS', 
                          'OT_NO_FOB_SUPPORT', 'OT_NO_GPS_SUPPORT', 
                          'OT_NO_NETWORK_SUPPORT', 'OT_NO_FILEMODULE_SUPPORT', 
                          'OT_NO_TIMEMODULE_SUPPORT', 'OT_NO_XSENS_SUPPORT',
                          'OT_NO_MAGICY_SUPPORT', 'OT_NO_SPEECH_SUPPORT', 
                          'OT_NO_CONSOLE_SUPPORT', 'OT_NO_CALLBACKMODULE_SUPPORT', 
                          'OT_NO_FASTTRACK_SUPPORT', 'OT_NO_DYNASIGHT_SUPPORT', 
                          'OT_NO_GROUPGATE_SUPPORT', 'OT_NO_ULTRATRACK_SUPPORT', 
                          'OT_NO_INTERSENSE_SUPPORT', 'OT_NO_ORIENTATION_SUPPORT', 
                          'OT_NO_INTERPORLATORMODULE_SUPPORT', 
                          'OT_NO_ARTDATATRACKER_SUPPORT', 
                          'OT_NO_BUTTON_SUPPORT', 'OT_NO_PARBUTTON_SUPPORT',
                          'OT_NO_CONFIDENCE_SUPPORT', 
                          'OT_NO_TIMEGATE_SUPPORT', 
                          'OT_NO_TIMESTAMPGENERATOR_SUPPORT', 
                          'OT_NO_CALLFORWARDMODULE_SUPPORT', 
                          'OT_BACKUP_ON_RECONFIG', 
                          'OT_NO_MOBILAB_SUPPORT'])
dllenv.Append(CPPDEFINES=['WIN32', '__WIN32__','NDEBUG', '_WINDOWS', '_USRDLL'
                          ,'__x86__','_CRT_SECURE_NO_DEPRECATE', '_WINDLL', 
                          '_MBCS'])

############################################
#            Get list of sources           #
############################################
essential_core_files = glob(join('src', 'core', '*.cxx')) + \
    [join('src', 'misc', 'OpenTracker.cxx')] + \
    [join('src', 'tool', 'OT_ACE_Log.cxx')]
common = ['ButtonOpNode.cxx', 'CommonNodeFactory.cxx', 'LogModule.cxx', 'FilterNode.cxx', 'SelectionNode.cxx', 'DESPFilterNode.cxx', 'Transformation.cxx', 'RangeFilterNode.cxx', 'EventUtilityNode.cxx', 'PositionFilterNode.cxx', 'ThresholdFilterNode.cxx', 'MatrixTransformation.cxx', 'VirtualTransformation.cxx', 'StaticTransformation.cxx', 'DynamicTransformation.cxx', 'EllipsoidTransformNode.cxx', 'TriangulateOrientationNode.cxx', 'DifferenceNode.cxx', 'EventQueueNode.cxx', 'InvertTransformation.cxx', 'MergeNode.cxx', 'DESP.cxx', 'HeartrateFilterNode.cxx', 'GKTransformNode.cxx']
common_files = [join('src', 'common', file) for file in common]
input_files  = []
misc = [join('xml','XercesXMLWriter.cxx'), join('xml','TinyXMLWriter.cxx')]
misc_files = [join('src', 'misc', file) for file in misc]
extra_files = [join('extras','intersense','isense.c')]

otlib = dllenv.SharedLibrary(join('lib', 'win32', 'opentracker'), essential_core_files + common_files + input_files + extra_files + misc_files)

#otcon = prgenv.Program(join('
