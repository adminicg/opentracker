# This build script is targeted specifically towards Windows XP, 
# using Microsoft Visual Studio 7.1 (2003)
# Dependencies are copied from their source directories to
# the project directory

import sys, os
from glob import glob
from os.path import join
################################
#       Helper Functions       #
################################
def filterHeaders(files):
    for file in files:
        if str(file).endswith('.h') or \
                str(file).endswith('.hh') or \
                str(file).endswith('.hpp'):
            yield file

def filterStaticLibraries(files):
    for file in files:
        if str(file).endswith('.lib'):
            yield file

def filterDynamicLibraries(files):
    for file in files:
        if str(file).endswith('.dll'):
            yield file

def findRelativePath(root, target):
    # replace root with blank empty string
    relative_path = target.replace(root, "", 1) 
    if relative_path.startswith(os.sep):
        return relative_path[1:] # omit first separator
    return relative_path

def installHeaders(root_dir, include_dir, _prefix, _alias):
    _headers = []
    for dirpath, dirnames, filenames in os.walk(join(root_dir, include_dir)):
        relative_path = findRelativePath(root_dir, dirpath)
        headers = [join(dirpath, header) for header in filterHeaders(filenames)]
        target_dir = join(_prefix, 'include', relative_path)
        _headers += env.Install(target_dir, headers)
    env.Alias(_alias, _headers)
    return _headers

def installLibraries(root_dir, lib_dir, _prefix, _alias):
    _libs = []
    for dirpath, dirnames, filenames in os.walk(join(root_dir, lib_dir)):
        relative_path = findRelativePath(root_dir, dirpath)
        libs = [join(dirpath, _lib) for _lib in filterStaticLibraries(filenames)] + \
            [join(dirpath, _lib) for _lib in filterDynamicLibraries(filenames)]
        target_dir = join(_prefix, relative_path)
        _libs += env.Install(target_dir, libs)
    env.Alias(_alias, _libs)
    return _libs

opts = Options('custom.py')
opts.Add(BoolOption('DEBUG', 'Set to build for debug', 0))

env = Environment (ENV = os.environ, options=opts)
# This is the project directory to install everything in
prefix = ARGUMENTS.get('PREFIX')
if prefix is None:
    print "No PREFIX has been specified"
    sys.exit(-1)

#########################################
# Install the ACE headers and libraries #
#########################################
try:
    ace_root_dir = os.environ['ACEROOT']
except KeyError:
    print "No ACEROOT has been specified"

ace_headers = installHeaders(ace_root_dir, 'ace', prefix, 'ace-headers')
ace_libraries = installLibraries(ace_root_dir, 'lib', prefix, 'ace-libs')

############################################
# Install the Xerces headers and libraries #
############################################
try:
    xercesc_root_dir = os.environ['XERCESCROOT']
except KeyError:
    print "No XERCESCROOT has been specified"

xercesc_headers = installHeaders(join(xercesc_root_dir, 'src'), 'xercesc', prefix, 'xercesc-headers')
xercesc_debug_libs    = installLibraries(join(xercesc_root_dir, 'Build','Win32','VC7.1'), 'Debug', prefix, 'xercesc-debug-libs')
xercesc_release_libs = installLibraries(join(xercesc_root_dir, 'Build','Win32','VC7.1'), 'Release', prefix, 'xercesc-release-libs')
env.Alias('xercesc-libs', xercesc_debug_libs+xercesc_release_libs)

############################################
#            Build OpenTracker             #
############################################
