# This build script is targeted specifically towards Windows XP, 
# using Microsoft Visual Studio 7.1 (2003)
# Dependencies are copied from their source directories to
# the project directory

import sys, os
from glob import glob
from os.path import join, basename
################################################################################
#     extend path to include SCons builders                                    #
################################################################################
sys.path.append('builders')

################################################################################
#     Build-specific classes                                                   #
################################################################################
class CORBAStubs:
    def __init__(self, env, 
		 cxx_install_directory=join('idl', 'skeletons'), 
		 python_install_directory=join('lib','python')):
	self.env = env
	self.cxx_install_directory = cxx_install_directory
	self.python_install_directory = python_install_directory
	self.cxx, self.python, self.java = [], [], []

    def addCxxStubs(self, idl_file):
	self.cxx += env.OMNIIDLCXX(idl_file, OMNIIDL_INSTALL_DIRECTORY=self.cxx_install_directory)

    def addPythonStubs(self, idl_file):
	self.python += env.OMNIIDLPY(idl_file, OMNIIDL_INSTALL_DIRECTORY=self.python_install_directory)

    def addJavaStubs(self, idl_file, pkgprefix=None):
	if pkgprefix is None:
	    self.java += env.IDLJ(idl_file)
	else:
	    self.java += env.IDLJ(idl_file, PKGPREFIX=pkgprefix)

    def addStubsAndSkeletons(self, idl_file, pkgprefix=None):
	self.addCxxStubs(idl_file)
	#if env['ENABLE_OMNIORBPY']:
	#    self.addPythonStubs(idl_file)
	#if env['ENABLE_JAVA']:
	#    self.addJavaStubs(idl_file, pkgprefix)
	return {'cxx':self.cxx, 'python':self.python, 'java':self.java}

################################
#       Helper Functions       #
################################
def filterFiles(files, suffixes):
    for file in files:
        for suffix in suffixes:
            if str(file).endswith(suffix):
                yield file

def filterStaticLibraries(files):
    for file in files:
        if str(file).endswith('.lib'):
            yield file

def filterDynamicLibraries(files):
    for file in files:
        if str(file).endswith('.dll'):
            yield file

def findRelativePath(root, target):
    # replace root with blank empty string
    relative_path = target.replace(root, "", 1) 
    if relative_path.startswith(os.sep):
        return relative_path[1:] # omit first separator
    return relative_path

def installRelativeToDirectory(env, root_dir, include_dir, _prefix, _alias, _suffixes):
    _headers = []
    for dirpath, dirnames, filenames in os.walk(join(root_dir, include_dir)):
        relative_path = findRelativePath(root_dir, dirpath)
        headers = [join(dirpath, header) for header in filterFiles(filenames, _suffixes)]
        target_dir = join(_prefix, relative_path)
        _headers += env.Install(target_dir, headers)
    env.Alias(_alias, _headers)
    return _headers

def installFiles(env, include_dir, _prefix, _alias, _suffixes):
    _headers = []
    for dirpath, dirnames, filenames in os.walk(join(include_dir)):
        headers = [join(dirpath, header) for header in filterFiles(filenames, _suffixes)]
        _headers += env.Install(_prefix, headers)
    env.Alias(_alias, _headers)
    return _headers
    
def installLibraries(env, lib_dir, _prefix, _alias):
    _libs = []
    for dirpath, dirnames, filenames in os.walk(join(lib_dir)):
        #relative_path = findRelativePath(root_dir, dirpath)
        libs = [join(dirpath, _lib) for _lib in filterStaticLibraries(filenames)] + \
            [join(dirpath, _lib) for _lib in filterDynamicLibraries(filenames)]
        target_dir = join(_prefix, 'lib')
        _libs += env.Install(target_dir, libs)
    env.Alias(_alias, _libs)
    return _libs

########################
# Set up build options #
########################
opts = Options('custom.py')
opts.Add(BoolOption('DEBUG', 'Set to build for debug', 0))
opts.Add(BoolOption('ENABLE_CORBA', 'Set to enable support for CORBA', 0))
opts.Add(BoolOption('ENABLE_NETWORKING', 'Set to enable support for ACE networking', 0))

env = Environment (ENV = os.environ, options=opts)
# This is the project directory to install everything in
prefix = ARGUMENTS.get('PREFIX')
if prefix is None:
    print "No PREFIX has been specified"
    sys.exit(-1)

#########################################
# Install the ACE headers and libraries #
#########################################
try:
    ace_root_dir = os.environ['ACEROOT']
except KeyError:
    print "No ACEROOT has been specified"

ace_headers = installRelativeToDirectory(env, ace_root_dir, 'ace', join(prefix, 'include'), 'ace-headers', ['.h','.inl','.cpp'])
# Hack to correct anomaly in header scanner 
# See the following in Condition_Thread_Mutex.h: 
#        include /**/ "ace/pre.h"
env.Depends(join(prefix, 'include', 'ace', 'Condition_Thread_Mutex.h'), 
            join(prefix, 'include', 'ace', 'pre.h'))
env.Depends(join(prefix, 'include', 'ace', 'config-win32-common.h'), 
            join(prefix, 'include', 'ace', 'post.h'))
ace_libraries = installLibraries(env, join(ace_root_dir, 'lib'), prefix, 'ace-libs')

############################################
# Install the Xerces headers and libraries #
############################################
try:
    xercesc_root_dir = os.environ['XERCESCROOT']
except KeyError:
    print "No XERCESCROOT has been specified"

xercesc_headers = installRelativeToDirectory(env, join(xercesc_root_dir, 'src'), 'xercesc', join(prefix, 'include'), 'xercesc-headers', ['.hpp', '.c'])
xercesc_debug_libs    = installLibraries(env, join(xercesc_root_dir, 'Build','Win32','VC7.1', 'Debug'), prefix, 'xercesc-debug-libs')
xercesc_release_libs = installLibraries(env, join(xercesc_root_dir, 'Build','Win32','VC7.1', 'Release'), prefix, 'xercesc-release-libs')
env.Alias('xercesc-libs', xercesc_debug_libs+xercesc_release_libs)

############################################
#            Build OpenTracker             #
############################################
env.Append(CPPPATH=['include', join(prefix,'include')])
env.Append(LIBPATH=[join(prefix,'lib')])
env.Append(LIBS = ['xerces-c_2', 'ACE'])
#env.Append(LIBS = xercesc_release_libs + ace_libraries)
env.Append(LIBS = ['odbc32', 'odbccp32', 'kernel32', 'user32', 'gdi32',
                   'winspool', 'comdlg32', 'advapi32', 'shell32', 'ole32'
                   , 'oleaut32', 'uuid','odbc32', 'odbccp32'])
env.Append(CPPDEFINES=['OPENTRACKER_EXPORTS', 'USING_SCONS', 
                          'OT_NO_FOB_SUPPORT', 'OT_NO_GPS_SUPPORT', 
                          'OT_NO_NETWORK_SUPPORT', 'OT_NO_FILEMODULE_SUPPORT', 
                          'OT_NO_TIMEMODULE_SUPPORT', 'OT_NO_XSENS_SUPPORT',
                          'OT_NO_MAGICY_SUPPORT', 'OT_NO_SPEECH_SUPPORT', 
                          'OT_NO_CONSOLE_SUPPORT', 'OT_NO_CALLBACKMODULE_SUPPORT', 
                          'OT_NO_FASTTRACK_SUPPORT', 'OT_NO_DYNASIGHT_SUPPORT', 
                          'OT_NO_GROUPGATE_SUPPORT', 'OT_NO_ULTRATRACK_SUPPORT', 
                          'OT_NO_INTERSENSE_SUPPORT', 'OT_NO_ORIENTATION_SUPPORT', 
                          'OT_NO_INTERPORLATORMODULE_SUPPORT', 
                          'OT_NO_ARTDATATRACKER_SUPPORT', 
                          'OT_NO_BUTTON_SUPPORT', 'OT_NO_PARBUTTON_SUPPORT',
                          'OT_NO_CONFIDENCE_SUPPORT', 
                          'OT_NO_TIMEGATE_SUPPORT', 
                          'OT_NO_TIMESTAMPGENERATOR_SUPPORT', 
                          'OT_NO_CALLFORWARDMODULE_SUPPORT', 
                          'OT_BACKUP_ON_RECONFIG', 
                          'OT_NO_MOBILAB_SUPPORT'])
env.Append(CPPDEFINES=['WIN32', '__WIN32__','NDEBUG', '_WINDOWS', '_USRDLL'
                          ,'__x86__','_CRT_SECURE_NO_DEPRECATE', '_WINDLL', 
                          '_MBCS'])
############################################
#            Get list of sources           #
############################################
essential_core_files = glob(join('src', 'core', '*.cxx')) + \
    [join('src', 'misc', 'OpenTracker.cxx')] + \
    [join('src', 'tool', 'OT_ACE_Log.cxx')]
common = ['ButtonOpNode.cxx', 'CommonNodeFactory.cxx', 'LogModule.cxx', 'FilterNode.cxx', 'SelectionNode.cxx', 'DESPFilterNode.cxx', 'Transformation.cxx', 'RangeFilterNode.cxx', 'EventUtilityNode.cxx', 'PositionFilterNode.cxx', 'ThresholdFilterNode.cxx', 'MatrixTransformation.cxx', 'VirtualTransformation.cxx', 'StaticTransformation.cxx', 'DynamicTransformation.cxx', 'EllipsoidTransformNode.cxx', 'TriangulateOrientationNode.cxx', 'DifferenceNode.cxx', 'EventQueueNode.cxx', 'InvertTransformation.cxx', 'MergeNode.cxx', 'DESP.cxx', 'HeartrateFilterNode.cxx', 'GKTransformNode.cxx']
common_files = [join('src', 'common', file) for file in common]
input_files  = []
misc = [join('xml','XercesXMLWriter.cxx'), join('xml','TinyXMLWriter.cxx')]
misc_files = [join('src', 'misc', file) for file in misc]
extra_files = [join('extras','intersense','isense.c')]

#**************************************#
# Enable or disable networking support #
#**************************************#
if env['ENABLE_NETWORKING']:
    print "*************** ACE-based networking enabled ***************"
    extra_files += [join('src','network',_file) for _file in ['NetworkSourceModule.cxx', 'NetworkSinkModule.cxx']]
    env['CPPDEFINES'].remove('OT_NO_NETWORK_SUPPORT')


#*********************************#
# Enable or disable CORBA support #
#*********************************#
if env['ENABLE_CORBA']:
    print "*************** CORBA is enabled ***************"
    try:
        omniorb_root_dir = os.environ['OMNIORBROOT']
    except KeyError:
        print "No OMNIORBROOT has been specified"
        sys.exit(-1)
    # Install the omniORB headers and libraries #
    #omniorb_headers = installFiles(env, join(omniorb_root_dir, 'include'), join(prefix, 'include'), 'omniorb-headers', ['.h', '.hh'])
    omniorb_headers = installRelativeToDirectory(env, omniorb_root_dir, 'include', prefix, 'omniorb-headers', ['.hh', 'h'])

    for header in omniorb_headers:
        print str(header)
    env.Alias('omniorb-headers', omniorb_headers)

    # CORBAStubs instance will manage the various stubs and skeletons
    stub_generator = CORBAStubs(env)
    # configure environment to the various idl files that need to be compiled to CORBA stubs and skeletons
    import OmniIdlCxx
    OmniIdlCxx.generate(env)
    env.Append(CPPDEFINES='USE_CORBA')
    env.Append(CPPDEFINES=['__x86__', '__NT__', '__OSVERSION__=4', '__WIN32__'])
    
    env.Append(LIBS=['omniORB4', 'COS4', 'omniDynamic4', 'omnithread'])
    env.Append(CPPPATH=['idl', join('idl', 'COS')])
    for idl_file in [join('idl', _file) for _file in ['OT_CORBA.idl', 'UTS.idl']]:
	stub_generator.addStubsAndSkeletons(idl_file, pkgprefix='org.studierstube.opentracker')

    extra_files += [join('src', 'network', file) for file in ['CORBAUtils.cxx', 'CORBAModule.cxx']]
    extra_files += [cxx_file for cxx_file in filterFiles(stub_generator.cxx, ['.cc'])]
    # Explicitly define dependency between stubs and omniidl
#    env.Depends(stub_generator.cxx, omniidl)
    skeletons = []
    for header in filterFiles(stub_generator.cxx, ['.hh']):
        skeletons += env.Install(join(prefix,'include','OpenTracker','skeletons'), header)

############################################
#         Set up environments              #
############################################
# Make copies of the current Environment
dllenv = env.Copy()
prgenv = env.Copy()
dllenv.Append(CCFLAGS=['/O2','/W3', '/EHsc', '/MD', '/Z7', '/FD', '/TP', '/GR'])
dllenv.Append(LINKFLAGS=['/INCREMENTAL:NO', '/NOLOGO', '/DEBUG', 
                         '/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', 
                         '/MACHINE:X86', '/ERRORREPORT:PROMPT'])

dllenv['PDB'] = join('lib','win32','opentracker.pdb')

############################################
#        Build OpenTracker DLL             #
############################################
otlib = dllenv.SharedLibrary(join('lib', 'win32', 'opentracker'), essential_core_files + common_files + input_files + extra_files + misc_files)

dllenv.Install(join(prefix,'lib'), otlib)

############################################
#           Build executables              #
############################################
prgenv.Append(LIBS='opentracker')
prgenv.Append(CCFLAGS=['/O2','/Ob1', '/GF', '/Gy', '/W3', '/FD', '/EHsc', '/MD', '/GR'])
prgenv.Append(LINKFLAGS=['/INCREMENTAL:NO', '/NOLOGO',
                         '/SUBSYSTEM:CONSOLE', '/MACHINE:X86'])
otcon = prgenv.Program(join('bin', 'win32', 'opentracker'), join('src', 'standalones', 'main.cxx'))

################################################
# Install binaries and additional dependencies #
################################################
dlls = ['ACE.dll', 'xerces-c_2_7.dll', 'opentracker.dll']
otcon_install = env.Install(join(prefix, 'bin'), otcon)
executables = env.Alias('executables', [otcon_install])
prgenv.Depends(executables, [join(prefix, 'lib', _lib) for _lib in dlls])

############################################
# Install other files DTDs, XML files, etc #
############################################

ot_headers = installRelativeToDirectory(env, 'include', 'OpenTracker', join(prefix, 'include'), 'ot-headers', ['.h'])
ot_share_files = env.InstallAs(join(prefix, 'share'), 'share')
env.Alias('share-files', ot_share_files)
env.Alias('install', executables + ot_headers + ot_share_files)
